version: v2beta1
name: jcscherrer
vars:
  IMAGE_REGISTRY: "grpl"
  IMAGE_REPO: "jcscherrer"
functions:
  patch-values-file: |-
      task patch-values-file
  patch-values-file-patches-only: |-
      task patch-values-file-patches-only
  reset-values-file: |-
      task reset-values-file
# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  build: |-
    build_images --all
  build-app: |-
    build_images jcs
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      # patch-values-file-patches-only
      patch-values-file
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      build_images data -t data    # 3. Build, tag ("data") and push the data image (see "images")
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      echo "waiting on chart deployment..."
      # TODO: find a solution for windows (while is not working on windows)...
      sleep 10
      reset-values-file
      sleep 10
      # while ! kubectl get deploy -l app.kubernetes.io/name=grapi 2>/dev/null | grep grapi; do echo -n \".\"; sleep 1; done
      # kubectl get deploy -l app.kubernetes.io/name=grapi --for=condition=available
      start_dev grapi
      start_dev gruim
      start_dev jcs                # 4. Start dev mode \"app\" (see \"dev\" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      patch-values-file
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
      reset-values-file
# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  jcs:
    image: "${IMAGE_REGISTRY}/${IMAGE_REPO}:devspace"
    dockerfile: ./Dockerfile
    buildKit: # {} # implemented for bitbucket pipeline with the patch at the end of this file
      args: [--platform, 'linux/amd64,linux/arm64']
  data:
    image: "${IMAGE_REGISTRY}/${IMAGE_REPO}-data:devspace"
    dockerfile: ./Dockerfile.data
    buildKit: # {} # implemented for bitbucket pipeline with the patch at the end of this file
      args: [--platform, 'linux/amd64,linux/arm64']
# This is a list of `deployments` that DevSpace can create for this project
deployments:
  jcs:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: ./chart
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      valuesFiles:
        - ./chart/values.yaml
        - ./chart/values-dev.yaml
        - ./chart/values-devspace.yaml
        - ./chart/values-dev-invoicing.yaml
      values:
        DEV: "true"
# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  jcs:
    # Search for the container that runs this image
    labelSelector:
      app.kubernetes.io/instance: jcs
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: "${IMAGE_REGISTRY}/${IMAGE_REPO}:devspace"
    # Sync files between the local filesystem and the development container
    env:
      - name: DEV
        value: "true"
    sync:
      - path: ./
        excludePaths:
          - node_modules
          - chart
          - data
          - dist
          - grapi
          - gruim
        uploadExcludeFile: .dockerignore
    # Open a terminal and use the following command to start it
    terminal:
      command: (dos2unix ./rebuild.sh && ./rebuild.sh && sh) || sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    ports:
      # - port: "9229"
      - port: "4000"
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://localhost:4000
  gruim:
    # Search for the container that runs this image
    labelSelector:
      app.kubernetes.io/name: gruim
    devImage: docker.io/grpl/gruim:0.2.9
    env:
      - name: DEV
        value: "true"
    sync:
      - path: ./gruim/custommodules/.:/usr/src/app/src/lib/custom-components/.
        # - name: OPENAPI_URL
        #   value: "http://dev-app-grapi.grpl-cli.grapple-demo.com/openapi.json"
    # restartHelper:
    #   inject: true
    #   path: "export DEV=true && ./rebuild-assets.sh"
    ports:
      - port: "8080:8080"
    open:
      - url: http://localhost:8080
  grapi:
    # Search for the container that runs this image
    labelSelector:
      app.kubernetes.io/name: grapi
    devImage: docker.io/grpl/grapi:0.2.9
    env:
      - name: DEV
        value: "true"
      - name: CustomControllerDir
        value: "injections"
      - name: CustomControllerDirs
        value: '{"controllerDirs": "injections"}'
    # TODO: path to the controller directory
    sync:
      - path: ./grapi/injections/:/home/node/app/src/injections/
    # restartHelper:
    #   inject: true
    #   path: "export DEV=true && ./start.sh"
    ports:
      - port: "3000:3000"
    open:
      - url: http://localhost:3000
# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  gruim:
    command: |-
      devspace enter --label-selector app.kubernetes.io/name=gruim gruim $@
  grapi:
    command: |-
      devspace enter --label-selector app.kubernetes.io/name=grapi grapi $@
  migrate-db:
    command: |-
      devspace enter --label-selector app.kubernetes.io/name=grapi npm run build && \
      devspace enter --label-selector app.kubernetes.io/name=grapi npm run migrate
# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
# localRegistry:
#   enabled: false
# localRegistry:
#   localbuild: truede
profiles:
  - name: bitbucket
    activation:
      - vars:
          CI: true
    patches:
      - op: remove
        path: images.jcs.buildKit
      - op: remove
        path: images.data.buildKit
