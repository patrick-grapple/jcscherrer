# Default values for myapp.

dblocal:
  enabled: true
externalsecrets:
  enabled: true
env:
  - name: SVELTE_APP_USERNAME
    # value: admin
    valueFrom:
      secretKeyRef:
        name: jcs-admin-secret
        key: SVELTE_APP_USERNAME
  - name: SVELTE_APP_PASSWORD
    # value: password
    valueFrom:
      secretKeyRef:
        name: jcs-admin-secret
        key: SVELTE_APP_PASSWORD
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: true
  gras: {}
  grapi:
    beimagetag: "0.2.9"
    automigrate: false
    autorestartgruim: true
    autoscaling:
      minReplicas: 3
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    externalsecrets:
      # - name: "classicmodelsas-auroramysql"
      #   spec:
      #     refreshInterval: 1h
      #     secretStoreRef:
      #       name: aws-secretstore
      #       kind: ClusterSecretStore
      #     target:
      #       name: auroramysql
      #       creationPolicy: Owner
      #     dataFrom:
      #       - extract:
      #           key: cloud20x/rds/auroramysql
      - name: "jcscherrer-bexio"
        spec:
          refreshInterval: 1h
          secretStoreRef:
            name: aws-secretstore
            kind: ClusterSecretStore
          target:
            name: jcscherrer-bexio
            creationPolicy: Owner
          dataFrom:
            - extract:
                key: cloud20x/jcscherrer/bexionop
    initContainers:
      - name: wait-for-db
        spec:
          name: wait-for-db
          image: grpl/jcscherrer-data:data
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" ; then
                echo "database already exists..."
              else
                echo "wait for database"
                while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;"; do
                  echo -n .;
                  sleep 2;
                done;
              fi
      - name: update-db-202501
        spec:
          name: update-db-202501
          image: mysql
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              echo "db available now..."
              if ! mysql -h ${host} -P ${port} -u ${username} -p${password} -e "use jcscherrer; SHOW COLUMNS FROM Rapport LIKE 'kundeIds'; " | grep -i kunde; then
                echo "run the upgrade..."
                mysql -h ${host} -P ${port} -u ${username} -p${password} -e 'use jcscherrer; ALTER TABLE `Rapport` ADD COLUMN `kundeIds` varchar(255) NULL AFTER `kundeId`; SET SQL_SAFE_UPDATES = 0; UPDATE Rapport AS a INNER JOIN Rapport AS b ON a.kundeId = b.kundeId SET a.kundeIds = concat("[",b.kundeId,"]"); SET SQL_SAFE_UPDATES = 1; ALTER TABLE `Rapport` DROP COLUMN `kundeId`;'
              else
                echo "update-db-202501 already patched"
              fi
    datasources:
      - name: jcscherrer
        spec:
          mysql:
            database: jcscherrer
            host: $(host)
            name: jcscherrer
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    discoveries:
      - name: jcscherrer
        spec:
          all: true
          dataSource: jcscherrer
          disableCamelCase: false
          schema: jcscherrer
    relations:
      - name: trainer
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainer
          relationType: belongsTo
          sourceModel: Rapport
      - name: platz
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platz
          relationType: belongsTo
          sourceModel: Rapport
      - name: kunde
        spec:
          destinationModel: Kunde
          foreignKeyName: kundeId
          registerInclusionResolver: true
          relationName: kunde
          relationType: belongsTo
          sourceModel: Rapport
      - name: gruppe
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppe
          relationType: belongsTo
          sourceModel: Rapport
      - name: invoice
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoice
          relationType: hasMany
          sourceModel: Rapport
      - name: trainerarchived
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainerarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: platzarchived
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platzarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: kundearchived
        spec:
          destinationModel: Kunde
          foreignKeyName: kundeId
          registerInclusionResolver: true
          relationName: kundearchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: gruppearchived
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppearchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: invoicearchived
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoicearchived
          relationType: hasMany
          sourceModel: ArchivedRapport
      - name: SummerRateBefore
        spec:
          destinationModel: Product
          foreignKeyName: SummerRateBeforeId
          registerInclusionResolver: true
          relationName: SummerRateBefore
          relationType: belongsTo
          sourceModel: Trainer
      # sadly multiple belongsTo relations still not fixed (waiting on PR to be merged):
      # https://wolke7.atlassian.net/browse/LB4I-52
      # also involves:
      # git mv grapi/postpatches/addAdditionalRelationsToTrainer.sh grapi/postpatches/addAdditionalRelationsToTrainer.disabled
      # git mv grapi/prerelationpatches/addAdditionalRelationsToTrainer.sh grapi/prerelationpatches/addAdditionalRelationsToTrainer.disabled
      # - name: SummerRateAfter
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: SummerRateAfterId
      #     registerInclusionResolver: true
      #     relationName: SummerRateAfter
      #     relationType: belongsTo
      #     sourceModel: Trainer
      # - name: WinterRateBefore
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: WinterRateBeforeId
      #     registerInclusionResolver: true
      #     relationName: WinterRateBefore
      #     relationType: belongsTo
      #     sourceModel: Trainer
      # - name: WinterRateAfter
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: WinterRateAfterId
      #     registerInclusionResolver: true
      #     relationName: WinterRateAfter
      #     relationType: belongsTo
      #     sourceModel: Trainer
      - name: KUNDE
        content: '{"relationName": "KUNDE", "customReferenceKeys":true, "sourceModel": "Kunde","customSourceModelKey":"bexioId","destinationModel":"Kunde","customTargetModelKey":"bexioId","throughModel":"KundeThrough","relationType":"hasManyThrough","sourceKeyOnThrough":"contactId","targetKeyOnThrough":"contactSubId","registerInclusionResolver":true}'
        # spec doesn't work as customReferences (on source and target) are not yet implemented in grapi
        # spec:
        #   relationName: KUNDE
        #   sourceModel: Kunde
        #   destinationModel: "Kunde"
        #   throughModel: "KundeThrough"
        #   relationType: hasManyThrough
        #   sourceKeyOnThrough: "contactId"
        #   targetKeyOnThrough: "contactSubId"
        #   # # customReferences (on source and target) are not yet implemented in grapi
        #   # customReferenceKeys: "true"
        #   # customSourceModelKey: "bexioId"
        #   # customTargetModelKey: "bexioId"
        #   # # sourceModelPrimaryKey: "bexioId"
        #   # # destinationModelPrimaryKey: "bexioId"
        #   registerInclusionResolver: true
      - name: rapport
        spec:
          destinationModel: Rapport
          foreignKeyName: relatedRapportId
          registerInclusionResolver: true
          relationName: rapport
          relationType: belongsTo
          sourceModel: Invoices
    fuzzysearch:
      - name: kunde
        content: 'jcs:{"fuzzy":true,"centralFuzzy":false,"datasource":"jcscherrer","appName":"Grpl","include":"kunde"}'
        # spec:
        #   fuzzy: true
        #   centralFuzzy: false
        #   datasource: "jcscherrer"
        #   appName: "Grpl"
        #   # include: "kundes"
    restcruds:
      - name: "jcscherrer"
        spec:
          datasource: "jcscherrer"
    controllers: []
    prerelationpatches: []
    postpatches: []
  gruim:
    uiimagetag: "0.2.9"
    autoscaling:
      minReplicas: 3
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#004a99","fg":"#ffffff"},"accent":{"DEFAULT":"#fa7252","fg":"#ffffff"}}}'
    config: '{"global":{"list-size":10,"field-properties":{"id":{"readonly":false}}, "weekStart": 1},"schema":{"Trainer":{"field-order":["id","vorname","name","email","aktiv","SummerRateBefore","SummerRateAfter","WinterRateBefore","WinterRateAfter","ClubRate","notizen","token"]},"Kunde":{"field-order":["id","bexioId","name","vorname","mail","ort","plz","strasse","land"]},"Gruppe":{"field-order":["id","gruppenname","beschreibung","gruppentyp","notizen"]},"Product":{"field-order":["id","bexioId","interncode","internname","interndescription","saleprice","taxid","articlegroupid"]},"Rapport":{"field-order":["id","datum","invoicedIn","trainer","kunde","gruppe","platz","startzeit","trainingsdauer","trainingType","nachholtermin","probetraining","archived","notizen"]}}}'
    additionalpackages: "svelte-fullcalendar@2.0.0-beta.0 @fullcalendar/common@5.10.1 @fullcalendar/core@5.10.1 @fullcalendar/daygrid@5.10.1 @fullcalendar/interaction@5.10.1 @fullcalendar/timegrid@5.10.1 dayjs@1.11.2"
    custommodules: []
replicaCount: 3
image:
  repository: grpl/grapple-template-pr
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.45.pr-33"
imagetest:
  repository: apptest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  ssl: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
