# Default values for myapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


env: {}
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: true
  gras: {}
  grapi:
    # beimagetag: "v0.130"
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    externalsecrets:
      - name: "classicmodelsas-auroramysql"
        spec:
          refreshInterval: 1h
          secretStoreRef:
            name: aws-secretstore
            kind: ClusterSecretStore
          target:
            name: auroramysql
            creationPolicy: Owner
          dataFrom:
            - extract:
                key: cloud20x/rds/auroramysql
      - name: "jcscherrer-bexio"
        spec:
          refreshInterval: 1h
          secretStoreRef:
            name: aws-secretstore
            kind: ClusterSecretStore
          target:
            name: jcscherrer-bexio
            creationPolicy: Owner
          dataFrom:
            - extract:
                key: cloud20x/jcscherrer/bexionop
    datasources:
      - content: '{ "name": "jcscherrer", "connector": "mysql", "url": "", "host": "${host}", "port": "${port}", "user": "${username}", "password": "${password}", "database": "jcscherrer"}'
        name: jcscherrer
    discoveries:
      - content: '{"dataSource":"jcscherrer","schema":"jcscherrer","all":"true","disableCamelCase":false}'
        name: jcscherrer
    relations:
      - content: '{"sourceModel": "Rapport", "destinationModel": "Trainer", "foreignKeyName": "trainerId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: trainer
      - content: '{"sourceModel": "Rapport", "destinationModel": "Platz", "foreignKeyName": "platzId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: platz
      - content: '{"sourceModel": "Rapport", "destinationModel": "Kunde", "foreignKeyName": "kundeId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: kunde
      - content: '{"sourceModel": "Rapport", "destinationModel": "Gruppe", "foreignKeyName": "gruppeId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: gruppe
      - content: '{"sourceModel": "Rapport", "destinationModel": "Invoices", "foreignKeyName": "rapportId", "relationType": "hasMany", "registerInclusionResolver": true}'
        name: invoice
      - content: '{"sourceModel": "ArchivedRapport", "destinationModel": "Trainer", "foreignKeyName": "trainerId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: trainerarchived
      - content: '{"sourceModel": "ArchivedRapport", "destinationModel": "Platz", "foreignKeyName": "platzId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: platzarchived
      - content: '{"sourceModel": "ArchivedRapport", "destinationModel": "Kunde", "foreignKeyName": "kundeId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: kundearchived
      - content: '{"sourceModel": "ArchivedRapport", "destinationModel": "Gruppe", "foreignKeyName": "gruppeId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: gruppearchived
      - content: '{"sourceModel": "ArchivedRapport", "destinationModel": "Invoices", "foreignKeyName": "rapportId", "relationType": "hasMany", "registerInclusionResolver": true}'
        name: invoicearchived
      - content: '{"relationName": "SummerRateBefore", "sourceModel": "Trainer","destinationModel": "Product","foreignKeyName":"SummerRateBeforeId","relationType":"belongsTo","registerInclusionResolver":true}'
        name: SummerRateBefore
      - content: '{"relationName": "KUNDE", "customReferenceKeys":true, "sourceModel": "Kunde","customSourceModelKey":"bexioId","destinationModel":"Kunde","customTargetModelKey":"bexioId","throughModel":"KundeThrough","relationType":"hasManyThrough","sourceKeyOnThrough":"contactId","targetKeyOnThrough":"contactSubId","registerInclusionResolver":true}'
        name: KUNDE
      - content: '{"sourceModel": "Invoices", "destinationModel": "Rapport", "foreignKeyName": "relatedRapportId", "relationType": "belongsTo", "registerInclusionResolver": true}'
        name: rapport
    restcruds:
      - content: '{"datasource":"jcscherrer"}'
        name: jcscherrer
    controllers: []
    prerelationpatches: []
    postpatches: []
  gruim:
    # uiimagetag: "0.1.38"
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#004a99","fg":"#ffffff"},"accent":{"DEFAULT":"#fa7252","fg":"#ffffff"}}}'
    config: '{"global":{"list-size":10,"field-properties":{"id":{"readonly":false}}, "weekStart": 1},"schema":{"Trainer":{"field-order":["id","vorname","name","email","aktiv","SummerRateBefore","SummerRateAfter","WinterRateBefore","WinterRateAfter","ClubRate","notizen","token"]},"Kunde":{"field-order":["id","bexioId","name","vorname","mail","ort","plz","strasse","land"]},"Gruppe":{"field-order":["id","gruppenname","beschreibung","gruppentyp","notizen"]},"Product":{"field-order":["id","bexioId","interncode","internname","interndescription","saleprice","taxid","articlegroupid"]},"Rapport":{"field-order":["id","datum","invoicedIn","trainer","kunde","gruppe","platz","startzeit","trainingsdauer","trainingType","nachholtermin","probetraining","archived","notizen"]}}}'
    additionalpackages: "svelte-fullcalendar@2.0.0-beta.0 @fullcalendar/common@5.10.1 @fullcalendar/core@5.10.1 @fullcalendar/daygrid@5.10.1 @fullcalendar/interaction@5.10.1 @fullcalendar/timegrid@5.10.1 dayjs@1.11.2"
    custommodules: []
replicaCount: 1
image:
  repository: grpl/grapple-template-pr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.45.pr-33"
imagetest:
  repository: apptest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
