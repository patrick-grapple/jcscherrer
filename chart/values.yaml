# Default values for myapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


env: {}
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: true
  gras: {}
  grapi:
    # beimagetag: "v0.130"
    automigrate: false
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    externalsecrets:
      - name: "classicmodelsas-auroramysql"
        spec:
          refreshInterval: 1h
          secretStoreRef:
            name: aws-secretstore
            kind: ClusterSecretStore
          target:
            name: auroramysql
            creationPolicy: Owner
          dataFrom:
            - extract:
                key: cloud20x/rds/auroramysql
      - name: "jcscherrer-bexio"
        spec:
          refreshInterval: 1h
          secretStoreRef:
            name: aws-secretstore
            kind: ClusterSecretStore
          target:
            name: jcscherrer-bexio
            creationPolicy: Owner
          dataFrom:
            - extract:
                key: cloud20x/jcscherrer/bexionop
    datasources:
      - name: jcscherrer
        spec:
          mysql:
            database: jcscherrer
            host: $(host)
            name: jcscherrer
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    discoveries:
      - name: jcscherrer
        spec:
          all: true
          dataSource: jcscherrer
          disableCamelCase: false
          schema: jcscherrer
    relations:
      - name: trainer
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainer
          relationType: belongsTo
          sourceModel: Rapport
      - name: platz
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platz
          relationType: belongsTo
          sourceModel: Rapport
      - name: kunde
        spec:
          destinationModel: Kunde
          foreignKeyName: kundeId
          registerInclusionResolver: true
          relationName: kunde
          relationType: belongsTo
          sourceModel: Rapport
      - name: gruppe
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppe
          relationType: belongsTo
          sourceModel: Rapport
      - name: invoice
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoice
          relationType: hasMany
          sourceModel: Rapport
      - name: trainerarchived
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainerarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: platzarchived
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platzarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: kundearchived
        spec:
          destinationModel: Kunde
          foreignKeyName: kundeId
          registerInclusionResolver: true
          relationName: kundearchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: gruppearchived
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppearchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: invoicearchived
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoicearchived
          relationType: hasMany
          sourceModel: ArchivedRapport
      - name: SummerRateBefore
        spec:
          destinationModel: Product
          foreignKeyName: SummerRateBeforeId
          registerInclusionResolver: true
          relationName: SummerRateBefore
          relationType: belongsTo
          sourceModel: Trainer
      - name: KUNDE
        content: '{"relationName": "KUNDE", "customReferenceKeys":true, "sourceModel": "Kunde","customSourceModelKey":"bexioId","destinationModel":"Kunde","customTargetModelKey":"bexioId","throughModel":"KundeThrough","relationType":"hasManyThrough","sourceKeyOnThrough":"contactId","targetKeyOnThrough":"contactSubId","registerInclusionResolver":true}'
        # spec:
        #   destinationModel: "Kunde"
        #   registerInclusionResolver: true
        #   customReferenceKeys: "true"
        #   customSourceModelKey: "bexioId"
        #   customTargetModelKey: "bexioId"
        #   relationName: KUNDE
        #   relationType: hasManyThrough
        #   throughModel: "KundeThrough"
        #   sourceModel: Kunde
        #   sourceKeyOnThrough: "contactId"
        #   targetKeyOnThrough: "contactSubId"
      - name: rapport
        spec:
          destinationModel: Rapport
          foreignKeyName: relatedRapportId
          registerInclusionResolver: true
          relationName: rapport
          relationType: belongsTo
          sourceModel: Invoices
    fuzzysearch:
      - name: kunde
        content: 'jcs:{"fuzzy":true,"centralFuzzy":false,"datasource":"jcscherrer","appName":"Grpl","include":"kunde"}'
        # spec:
        #   fuzzy: true
        #   centralFuzzy: false
        #   datasource: "jcscherrer"
        #   appName: "Grpl"
        #   # include: "kundes"
    restcruds:
      - name: "jcscherrer"
        spec:
          datasource: "jcscherrer"
    controllers:
      - name: bexio
        content: 
      - name: ping2
        content: aW1wb3J0IHtpbmplY3R9IGZyb20gJ0Bsb29wYmFjay9jb3JlJzsKaW1wb3J0IHsKICBSZXF1ZXN0LAogIFJlc3RCaW5kaW5ncywKICBnZXQsCiAgcmVzcG9uc2UsCiAgUmVzcG9uc2VPYmplY3QsCn0gZnJvbSAnQGxvb3BiYWNrL3Jlc3QnOwoKLyoqCiAqIE9wZW5BUEkgcmVzcG9uc2UgZm9yIHBpbmcyKCkKICovCmNvbnN0IFBJTkcyX1JFU1BPTlNFOiBSZXNwb25zZU9iamVjdCA9IHsKICBkZXNjcmlwdGlvbjogJ1BpbmcyIFJlc3BvbnNlJywKICBjb250ZW50OiB7CiAgICAnYXBwbGljYXRpb24vanNvbic6IHsKICAgICAgc2NoZW1hOiB7CiAgICAgICAgdHlwZTogJ29iamVjdCcsCiAgICAgICAgdGl0bGU6ICdQaW5nMlJlc3BvbnNlJywKICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICBncmVldGluZzoge3R5cGU6ICdzdHJpbmcnfSwKICAgICAgICAgIGRhdGU6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICB1cmw6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLAogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB0cnVlLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICB9LAogICAgfSwKICB9LAp9OwoKLyoqCiAqIEEgc2ltcGxlIGNvbnRyb2xsZXIgdG8gYm91bmNlIGJhY2sgaHR0cCByZXF1ZXN0cwogKi8KZXhwb3J0IGNsYXNzIFBpbmcyQ29udHJvbGxlciB7CiAgY29uc3RydWN0b3IoQGluamVjdChSZXN0QmluZGluZ3MuSHR0cC5SRVFVRVNUKSBwcml2YXRlIHJlcTogUmVxdWVzdCkge30KCiAgLy8gTWFwIHRvIGBHRVQgL3BpbmcyYAogIEBnZXQoJy9waW5nMicpCiAgQHJlc3BvbnNlKDIwMCwgUElORzJfUkVTUE9OU0UpCiAgcGluZzIoKTogb2JqZWN0IHsKICAgIC8vIFJlcGx5IHdpdGggYSBncmVldGluZywgdGhlIGN1cnJlbnQgdGltZSwgdGhlIHVybCwgYW5kIHJlcXVlc3QgaGVhZGVycwogICAgcmV0dXJuIHsKICAgICAgZ3JlZXRpbmc6ICdIZWxsbyBmcm9tIGdyYXBwbGUnLAogICAgICBkYXRlOiBuZXcgRGF0ZSgpLAogICAgICB1cmw6IHRoaXMucmVxLnVybCwKICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZXEuaGVhZGVycyksCiAgICB9OwogIH0KfQo=
    prerelationpatches:
      - name: install
        content: ZWNobyAiaW5zdGFsbGluZyBkZXBlbmRlbmNpZXMiCm5wbSBpIGRheWpzCg==
      - name: addAdditionalRelationsToTrainer
        content: IyEvYmluL2Jhc2gKCmVjaG8gImVuYWJsaW5nIGhhc01hbnlUaHJvdWdoIHdpdGggc2FtZSB0YWJsZSAmIG5vLXBrIHJlZmVyZW5jZS4uLiIKCiMgdXBkYXRlIHRyYWluZXIgbW9kZWwgdG8gYWRkIHJlbGF0aW9ucwoKYWRkVHlwZXNBdD0iJChncmVwIC1uICd0eXBlOiBSZWxhdGlvblR5cGUuaGFzTWFueTsnIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9yZWxhdGlvbi50eXBlcy5kLnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZFR5cGVzQXQ9JCgoYWRkVHlwZXNBdCsxKSkKc2VkIC1pICIkYWRkVHlwZXNBdCBpIGN1c3RvbVJlZmVyZW5jZUtleVRvPzogc3RyaW5nOyBcbiBjdXN0b21SZWZlcmVuY2VLZXlGcm9tPzogc3RyaW5nOyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL3JlbGF0aW9uLnR5cGVzLmQudHMKCnNlZCAtaSAicyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmtleVRvOyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvIHx8IHJlbGF0aW9uTWV0YS5rZXlUbzsjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwpzZWQgLWkgInMjY29uc3QgdGFyZ2V0SWQgPSByZWxhdGlvbk1ldGEua2V5VG87I2NvbnN0IHRhcmdldElkID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvIHx8IHJlbGF0aW9uTWV0YS5rZXlUbzsjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKCmFkZElmQ29uZGl0aW9uQXQ9IiQoZ3JlcCAtbiAnY29uc3QgdGFyZ2V0UHJpbWFyeUtleSA9IChfZiA9IHJlbGF0aW9uTWV0YS5rZXlUbyknIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9oYXMtbWFueS9oYXMtbWFueS10aHJvdWdoLmhlbHBlcnMuanMgfCBjdXQgLWQgOiAtZiAxKSIKYWRkSWZDb25kaXRpb25BdD0kKChhZGRJZkNvbmRpdGlvbkF0KzEpKQpzZWQgLWkgIiRhZGRJZkNvbmRpdGlvbkF0IGkgaWYgKHJlbGF0aW9uTWV0YS5jdXN0b21SZWZlcmVuY2VLZXlUbykgeyBcbiB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvOyBcbn0iIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9oYXMtbWFueS9oYXMtbWFueS10aHJvdWdoLmhlbHBlcnMuanMKCnNlZCAtaSAicyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gKF9mID0gcmVsYXRpb25NZXRhLmtleVRvKSNsZXQgdGFyZ2V0UHJpbWFyeUtleSA9IChfZiA9IHJlbGF0aW9uTWV0YS5rZXlUbykjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKc2VkIC1pICJzI2tleUZyb206IHJlbGF0aW9uTWV0YS5rZXlGcm9tLCNrZXlGcm9tOiByZWxhdGlvbk1ldGEuY3VzdG9tUmVmZXJlbmNlS2V5RnJvbSB8fCByZWxhdGlvbk1ldGEua2V5RnJvbSwjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKZWNobyAiLS0tIgo=
    postpatches:
      - name: addAdditionalRelationsToTrainer
        content: IyEvYmluL2Jhc2gKZWNobyAiQ3JlYXRpbmcgZXh0cmEgcmVsYXRpb25zLi4uIgoKIyB1cGRhdGUgdHJhaW5lciBtb2RlbCB0byBhZGQgcmVsYXRpb25zCgpkZWxldGV0ZXh0dW50aWwgKCkgewogICAgSU5GSUxFPSQxCiAgICBGUk9NVEVYVD0kMgogICAgVE9URVhUPSQzCiAgICBERUxFVEVGUk9NPSQoKCQoZ3JlcCAiJHtUT1RFWFR9IiBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMgLW4gfCBjdXQgLWQgOiAtZiAxKS0kKGdyZXAgLUIxMCAiJHtUT1RFWFR9IiBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMgfCBncmVwICIke0ZST01URVhUfSIgLUExMCB8IHdjIC1sKSkpCiAgICBERUxFVEVVTlRJTD0kKGdyZXAgIiR7VE9URVhUfSIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzIC1uIHwgY3V0IC1kIDogLWYgMSkKICAgIGlmIFsgJHtERUxFVEVGUk9NfSAtZ3QgMCBdICYmIFsgJHtERUxFVEVVTlRJTH0gLWd0IDAgXTsgdGhlbgogICAgICAgIHNlZCAtaSAiJHtERUxFVEVGUk9NfSIsIiR7REVMRVRFVU5USUx9Iid7ZDt9JyBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMKICAgIGVsc2UKICAgICAgICBlY2hvICJub3QgZGVsZXRlZCBhcyBvbmUgb2YgdGhlIHZhcmlhYmxlcyBpcyBlbXB0eS4iCiAgICBmaQp9CgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgInN1bW1lclJhdGVBZnRlcklkPzogbnVtYmVyOyIKZGVsZXRldGV4dHVudGlsIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyAiQHByb3BlcnR5KHsiICJzdW1tZXJSYXRlQmVmb3JlSWQ/OiBudW1iZXI7IgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgIndpbnRlclJhdGVBZnRlcklkPzogbnVtYmVyOyIKZGVsZXRldGV4dHVudGlsIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyAiQHByb3BlcnR5KHsiICJ3aW50ZXJSYXRlQmVmb3JlSWQ/OiBudW1iZXI7IgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgImNsdWJSYXRlSWQ/OiBudW1iZXI7IgoKYWRkQXRNb2RlbD0iJChncmVwIC1uICdTdW1tZXJSYXRlQmVmb3JlSWQ6IG51bWJlcjsnIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyB8IGN1dCAtZCA6IC1mIDEpIgphZGRBdE1vZGVsPSQoKGFkZEF0TW9kZWwrMSkpCgpzZWQgLWkgIiRhZGRBdE1vZGVsIGkgQGJlbG9uZ3NUbygoKSA9PiBQcm9kdWN0LCB7bmFtZTogJ1N1bW1lclJhdGVBZnRlcid9KSBcbiBTdW1tZXJSYXRlQWZ0ZXJJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCmFkZEF0TW9kZWw9JCgoYWRkQXRNb2RlbCsyKSkKCnNlZCAtaSAiJGFkZEF0TW9kZWwgaSBAYmVsb25nc1RvKCgpID0+IFByb2R1Y3QsIHtuYW1lOiAnV2ludGVyUmF0ZUJlZm9yZSd9KSBcbiBXaW50ZXJSYXRlQmVmb3JlSWQ6IG51bWJlcjsiIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cwphZGRBdE1vZGVsPSQoKGFkZEF0TW9kZWwrMikpCgpzZWQgLWkgIiRhZGRBdE1vZGVsIGkgQGJlbG9uZ3NUbygoKSA9PiBQcm9kdWN0LCB7bmFtZTogJ1dpbnRlclJhdGVBZnRlcid9KSBcbiBXaW50ZXJSYXRlQWZ0ZXJJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCmFkZEF0TW9kZWw9JCgoYWRkQXRNb2RlbCsyKSkKCnNlZCAtaSAiJGFkZEF0TW9kZWwgaSBAYmVsb25nc1RvKCgpID0+IFByb2R1Y3QsIHtuYW1lOiAnQ2x1YlJhdGUnfSkgXG4gQ2x1YlJhdGVJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCgojIHVwZGF0ZSB0cmFpbmVyIHJlcG9zaXRvcnkgdG8gYWRkIHJlbGF0aW9ucwoKYWRkQXRSZXBvc2l0b3J5PSIkKGdyZXAgLW4gJ3JlYWRvbmx5IFN1bW1lclJhdGVCZWZvcmUnIHNyYy9yZXBvc2l0b3JpZXMvdHJhaW5lci5yZXBvc2l0b3J5LnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCgpzZWQgLWkgIiRhZGRBdFJlcG9zaXRvcnkgaSBwdWJsaWMgcmVhZG9ubHkgU3VtbWVyUmF0ZUFmdGVyOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHB1YmxpYyByZWFkb25seSBXaW50ZXJSYXRlQmVmb3JlOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHB1YmxpYyByZWFkb25seSBXaW50ZXJSYXRlQWZ0ZXI6IEJlbG9uZ3NUb0FjY2Vzc29yPFByb2R1Y3QsIHR5cGVvZiBUcmFpbmVyLnByb3RvdHlwZS5pZD47IiBzcmMvcmVwb3NpdG9yaWVzL3RyYWluZXIucmVwb3NpdG9yeS50cwphZGRBdFJlcG9zaXRvcnk9JCgoYWRkQXRSZXBvc2l0b3J5KzEpKQoKc2VkIC1pICIkYWRkQXRSZXBvc2l0b3J5IGkgcHVibGljIHJlYWRvbmx5IENsdWJSYXRlOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0iJChncmVwIC1uICd0aGlzLnJlZ2lzdGVySW5jbHVzaW9uUmVzb2x2ZXInIHNyYy9yZXBvc2l0b3JpZXMvdHJhaW5lci5yZXBvc2l0b3J5LnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCgpzZWQgLWkgIiRhZGRBdFJlcG9zaXRvcnkgaSB0aGlzLlN1bW1lclJhdGVBZnRlciA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ1N1bW1lclJhdGVBZnRlcicsIHByb2R1Y3RSZXBvc2l0b3J5R2V0dGVyLCk7IFxuIHRoaXMucmVnaXN0ZXJJbmNsdXNpb25SZXNvbHZlcignU3VtbWVyUmF0ZUFmdGVyJywgdGhpcy5TdW1tZXJSYXRlQWZ0ZXIuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHRoaXMuV2ludGVyUmF0ZUJlZm9yZSA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ1dpbnRlclJhdGVCZWZvcmUnLCBwcm9kdWN0UmVwb3NpdG9yeUdldHRlciwpOyBcbiB0aGlzLnJlZ2lzdGVySW5jbHVzaW9uUmVzb2x2ZXIoJ1dpbnRlclJhdGVCZWZvcmUnLCB0aGlzLldpbnRlclJhdGVCZWZvcmUuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHRoaXMuV2ludGVyUmF0ZUFmdGVyID0gdGhpcy5jcmVhdGVCZWxvbmdzVG9BY2Nlc3NvckZvcignV2ludGVyUmF0ZUFmdGVyJywgcHJvZHVjdFJlcG9zaXRvcnlHZXR0ZXIsKTsgXG4gdGhpcy5yZWdpc3RlckluY2x1c2lvblJlc29sdmVyKCdXaW50ZXJSYXRlQWZ0ZXInLCB0aGlzLldpbnRlclJhdGVBZnRlci5pbmNsdXNpb25SZXNvbHZlcik7IiBzcmMvcmVwb3NpdG9yaWVzL3RyYWluZXIucmVwb3NpdG9yeS50cwoKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKc2VkIC1pICIkYWRkQXRSZXBvc2l0b3J5IGkgdGhpcy5DbHViUmF0ZSA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ0NsdWJSYXRlJywgcHJvZHVjdFJlcG9zaXRvcnlHZXR0ZXIsKTsgXG4gdGhpcy5yZWdpc3RlckluY2x1c2lvblJlc29sdmVyKCdDbHViUmF0ZScsIHRoaXMuQ2x1YlJhdGUuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCiMgdXBkYXRlIGNvbnRyb2xsZXIgdG8gYWRkIHJlbGF0aW9ucwoKc2VkIC1pICJzI3JldHVybiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVCZWZvcmUoaWQpOyNyZXR1cm4gWyBcbiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVCZWZvcmUoaWQpLCBcbiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVBZnRlcihpZCksIFxuIHRoaXMudHJhaW5lclJlcG9zaXRvcnkuV2ludGVyUmF0ZUJlZm9yZShpZCksIFxuIHRoaXMudHJhaW5lclJlcG9zaXRvcnkuV2ludGVyUmF0ZUFmdGVyKGlkKSwgXG4gdGhpcy50cmFpbmVyUmVwb3NpdG9yeS5DbHViUmF0ZShpZCkgXG5dOyNnIiBzcmMvY29udHJvbGxlcnMvdHJhaW5lci1wcm9kdWN0LmNvbnRyb2xsZXIudHMKc2VkIC1pICJzI1Byb21pc2U8UHJvZHVjdD4jUHJvbWlzZTxQcm9taXNlPFByb2R1Y3Q+W10+I2ciIHNyYy9jb250cm9sbGVycy90cmFpbmVyLXByb2R1Y3QuY29udHJvbGxlci50cwoKZWNobyAiLS0tIgo=
  gruim:
    # uiimagetag: "0.1.38"
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#004a99","fg":"#ffffff"},"accent":{"DEFAULT":"#fa7252","fg":"#ffffff"}}}'
    config: '{"global":{"list-size":10,"field-properties":{"id":{"readonly":false}}, "weekStart": 1},"schema":{"Trainer":{"field-order":["id","vorname","name","email","aktiv","SummerRateBefore","SummerRateAfter","WinterRateBefore","WinterRateAfter","ClubRate","notizen","token"]},"Kunde":{"field-order":["id","bexioId","name","vorname","mail","ort","plz","strasse","land"]},"Gruppe":{"field-order":["id","gruppenname","beschreibung","gruppentyp","notizen"]},"Product":{"field-order":["id","bexioId","interncode","internname","interndescription","saleprice","taxid","articlegroupid"]},"Rapport":{"field-order":["id","datum","invoicedIn","trainer","kunde","gruppe","platz","startzeit","trainingsdauer","trainingType","nachholtermin","probetraining","archived","notizen"]}}}'
    additionalpackages: "svelte-fullcalendar@2.0.0-beta.0 @fullcalendar/common@5.10.1 @fullcalendar/core@5.10.1 @fullcalendar/daygrid@5.10.1 @fullcalendar/interaction@5.10.1 @fullcalendar/timegrid@5.10.1 dayjs@1.11.2"
    custommodules:
      - name: singleDay
        content: 
      - name: trainerDropDown
        content: PHNjcmlwdCBsYW5nPSJ0cyI+CiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gInN2ZWx0ZSI7CgogIGltcG9ydCBTZWxlY3QgZnJvbSAic3ZlbHRlLXNlbGVjdC9TZWxlY3Quc3ZlbHRlIjsKICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICJzdmVsdGUiOwogIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7CgogIGV4cG9ydCBsZXQgc2VsZWN0ZWRWYWx1ZToKICAgIHwgewogICAgICAgIHZhbHVlOiBudW1iZXI7CiAgICAgICAgbGFiZWw6IHN0cmluZzsKICAgICAgfQogICAgfCB7fSA9IHt9OwoKICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gIlRyYWluZXIiOwoKICBsZXQgaGFuZGxlQ2hhbmdlID0gKCkgPT4gewogICAgZGlzcGF0Y2goInVwZGF0ZVRyYWluZXIiLCB7CiAgICAgIHNlbGVjdGVkVmFsdWUsCiAgICB9KTsKICB9OwoKICBsZXQgbGlzdDogYW55ID0gW107CgogIG9uTW91bnQoYXN5bmMgZnVuY3Rpb24gKCkgewogICAgbGV0IHNhdmVkVHJhaW5lciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0cmFpbmVyIik7CgogICAgaWYgKHNhdmVkVHJhaW5lcikgewogICAgICBzZWxlY3RlZFZhbHVlID0gSlNPTi5wYXJzZShzYXZlZFRyYWluZXIpOwogICAgfQoKICAgIC8vIGdldCB0aGUgbGlzdCBvZiB0cmFpbmVycwogICAgLy8gc2V0IHRoZSBsaXN0IG9mIHRyYWluZXJzIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50CiAgICBsZXQgcmFwcG9ydHMgPSBhd2FpdCBmZXRjaCgKICAgICAgYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvdHJhaW5lcnM/ZmlsdGVyPXsid2hlcmUiOnsiYWt0aXYiOnRydWV9fWAKICAgICk7CiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmFwcG9ydHMuanNvbigpOwoKICAgIGxpc3QgPSBbCiAgICAgIHsKICAgICAgICB2bGF1ZTogMCwKICAgICAgICBsYWJlbDogIkFsbCBUcmFpbmVycyIsCiAgICAgIH0sCiAgICAgIC4uLmRhdGEubWFwKChyOiBhbnkpID0+ICh7CiAgICAgICAgdmFsdWU6IHIuaWQsCiAgICAgICAgbGFiZWw6IHIubmFtZSwKICAgICAgfSkpLAogICAgXTsKICB9KTsKPC9zY3JpcHQ+Cgo8ZGl2IGNsYXNzPSJtYXgtdy1zbSB0aGVtZWQiPgogIDxTZWxlY3QKICAgIGl0ZW1zPXtsaXN0fQogICAgYmluZDp2YWx1ZT17c2VsZWN0ZWRWYWx1ZX0KICAgIGJpbmQ6cGxhY2Vob2xkZXIKICAgIG9uOnNlbGVjdD17aGFuZGxlQ2hhbmdlfQogIC8+CjwvZGl2PgoKPHN0eWxlIGxhbmc9InBvc3Rjc3MiPgogIC50aGVtZWQgewogICAgLS1ib3JkZXJIb3ZlckNvbG9yOiAjMWE1Y2EzOwogICAgLS1ib3JkZXJSYWRpdXM6IDRweDsKICAgIC0taXRlbUhvdmVyQkc6ICNmZmYxZWU7CiAgICAtLWl0ZW1Jc0FjdGl2ZUJHOiAjZmE3MjUyOwogIH0KPC9zdHlsZT4K
      - name: createEvent
        content: PHNjcmlwdCBsYW5nPSJ0cyI+CiAgaW1wb3J0IGRheWpzIGZyb20gImRheWpzIjsKICBpbXBvcnQgQ3JlYXRlRXZlbnQgZnJvbSAiLi4vLi4vbW9kdWxlcy9SYXBwb3J0L2NyZWF0ZS5zdmVsdGUiOwogIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICJzdmVsdGUiOwogIGxldCBzYXZlZFRyYWluZXI6IHsKICAgIHZhbHVlOiBudW1iZXI7CiAgICBsYWJlbDogc3RyaW5nOwogIH0gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0cmFpbmVyIikgfHwgInt9Iik7CiAgZXhwb3J0IGxldCBjbG9zZVBvcHVwID0gKCkgPT4ge307CiAgZXhwb3J0IGxldCBzY2hlbWE6IGFueSA9IHt9OwoKICBleHBvcnQgbGV0IHNlbGVjdGVkRGF0ZTogc3RyaW5nID0gZGF5anMoKS5mb3JtYXQoIllZWVktTU0tREQiKTsKICBleHBvcnQgbGV0IHNlbGVjdGVkU3RhcnRUaW1lOiBzdHJpbmcgPSBkYXlqcygpLmZvcm1hdCgiSEg6bW0iKTsKICBleHBvcnQgbGV0IHNlbGVjdGVkRHVyYXRpb246IHN0cmluZyA9ICIwMTowMDowMCI7CgogIGxldCBsb2FkaW5nID0gZmFsc2U7CgogIG9uTW91bnQoYXN5bmMgKCkgPT4gewogICAgbG9hZGluZyA9IHRydWU7CgogICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpOwoKICAgIGxldCBrdW5kZUlucHV0ID0gZG9jdW1lbnQKICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3BsYWNlaG9sZGVyPSJrdW5kZSJdJykKICAgICAgPy5jbG9zZXN0KCIuc3ZlbHRlLXNlbGVjdCIpOwoKICAgIGxldCBldnQgPSBuZXcgUG9pbnRlckV2ZW50KCJwb2ludGVydXAiKTsKICAgIGt1bmRlSW5wdXQ/LmRpc3BhdGNoRXZlbnQoZXZ0KTsKICAgIGxvYWRpbmcgPSBmYWxzZTsKICB9KTsKCiAgY29uc3QgaXNVc2VyVHJhaW5lciA9ICgpID0+IHsKICAgIC8vIFRPRE86IHNlbmQgYSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kIHRvIHZlcmlmeSBpZiB0aGUgdG9rZW4gaXMgdmFsaWQKICAgIHJldHVybiAoCiAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0b2tlbiIpIHx8IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5jbHVkZXMoInRva2VuIikKICAgICk7CiAgfTsKCiAgJDogc2NoZW1hID0gewogICAgLi4uc2NoZW1hLAogICAgImZpZWxkLXByb3BlcnRpZXMiOiB7CiAgICAgIC4uLnNjaGVtYVsiZmllbGQtcHJvcGVydGllcyJdLAogICAgICAiaGlkZGVuLWZpZWxkcyI6IFsiaW52b2ljZWRJbiIsICJpbnZvaWNlSnNvbiIsICJhcmNoaXZlZCJdLAogICAgICAiZmllbGQtb3JkZXIiOiBbCiAgICAgICAgImRhdHVtIiwKICAgICAgICAic3RhcnR6ZWl0IiwKICAgICAgICAidHJhaW5pbmdzZGF1ZXIiLAogICAgICAgICJ0cmFpbmVyIiwKICAgICAgICAicGxhdHoiLAogICAgICAgICJ0cmFpbmluZ1R5cGUiLAogICAgICAgICJrdW5kZSIsCiAgICAgICAgImdydXBwZSIsCiAgICAgICAgIm5vdGl6ZW4iLAogICAgICAgICJuYWNoaG9sdGVybWluIiwKICAgICAgICAicHJvYmV0cmFpbmluZyIsCiAgICAgICAgImFyY2hpdmVkIiwKICAgICAgICAiaW52b2ljZWRJbiIsCiAgICAgICAgImludm9pY2VKc29uIiwKICAgICAgXSwKICAgICAgImJvb2xlYW4tZmllbGRzIjogWyJwcm9iZXRyYWluaW5nIiwgIm5hY2hob2x0ZXJtaW4iLCAiYXJjaGl2ZWQiXSwKCiAgICAgICJkZWZhdWx0LXZhbHVlcyI6IFsKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAiaW52b2ljZWRJbiIsCiAgICAgICAgICB2YWx1ZTogbnVsbCwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIG5hbWU6ICJ0cmFpbmVySWQiLAogICAgICAgICAgdmFsdWU6IHNhdmVkVHJhaW5lci52YWx1ZSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIG5hbWU6ICJkYXR1bSIsCiAgICAgICAgICB2YWx1ZTogZGF5anMoc2VsZWN0ZWREYXRlKS5mb3JtYXQoIllZWVktTU0tREQiKS5zdWJzdHIoMCwgMTApLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbmFtZTogInN0YXJ0emVpdCIsCiAgICAgICAgICB2YWx1ZTogZGF5anMoc2VsZWN0ZWRTdGFydFRpbWUpLmlzVmFsaWQoKQogICAgICAgICAgICA/IGRheWpzKHNlbGVjdGVkU3RhcnRUaW1lKS5mb3JtYXQoIkhIOm1tIikKICAgICAgICAgICAgOiBkYXlqcygpLmZvcm1hdCgiSEgiKSArICI6MDAiLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbmFtZTogInRyYWluaW5nc2RhdWVyIiwKICAgICAgICAgIHZhbHVlOiBzZWxlY3RlZER1cmF0aW9uLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbmFtZTogInRyYWluaW5nVHlwZSIsCiAgICAgICAgICB2YWx1ZTogInByaXZhdGUiLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbmFtZTogInBsYXR6SWQiLAogICAgICAgICAgdmFsdWU6IDEsIC8vcHJlc2VsZWN0IHBsYXR6IGZpZWxkIHdpdGggb25lIG9mIHRoZSB2YWx1ZXMKICAgICAgICB9LAogICAgICBdLAogICAgICAicmVsYXRpb25hbC1maWVsZHMiOiBbCiAgICAgICAgewogICAgICAgICAgbmFtZTogImt1bmRlIiwKICAgICAgICAgIHR5cGU6ICJGQVZPUklURSIsCiAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSwKICAgICAgICAgIHVzZUZ1enp5U2VhcmNoOiB0cnVlLAogICAgICAgICAgY29sdW1uczogWwogICAgICAgICAgICAiaWQiLAogICAgICAgICAgICAiYmV4aW9JZCIsCiAgICAgICAgICAgICJuYW1lIiwKICAgICAgICAgICAgInZvcm5hbWUiLAogICAgICAgICAgICAib3J0IiwKICAgICAgICAgICAgImdlYnVydHN0YWciLAogICAgICAgICAgICAicGhvbmUiLAogICAgICAgICAgICAicGhvbmVNb2JpbGUiLAogICAgICAgICAgICAibm90aXplbiIsCiAgICAgICAgICBdLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbmFtZTogInRyYWluZXIiLAogICAgICAgICAgZWRpdGFibGU6ICFpc1VzZXJUcmFpbmVyKCksCiAgICAgICAgICBjb2x1bW5zOiBbImlkIiwgIm5hbWUiLCAidm9ybmFtZSIsICJlbWFpbCJdLAogICAgICAgICAgZHJvcERvd25GaWx0ZXI6IHsKICAgICAgICAgICAgYWt0aXY6IHRydWUsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgIF0sCiAgICAgIC8vcmVhZG9ubHkgYW5kIGN1c3RvbS12YWxpZGF0aW9uIGFwcGx5IGlmIHRoZSB1c2VyIGlzIGEgdHJhaW5lcgogICAgICAicmVhZG9ubHktZmllbGRzIjogaXNVc2VyVHJhaW5lcigpID8gWyJ0cmFpbmVyIl0gOiBbXSwKICAgICAgImN1c3RvbS12YWxpZGF0aW9ucyI6IGlzVXNlclRyYWluZXIoKQogICAgICAgID8gWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZmllbGQ6ICJ0cmFpbmluZ3NkYXVlciIsCiAgICAgICAgICAgICAgdmFsaWRhdGlvbjogewogICAgICAgICAgICAgICAgbWVzc2FnZTogIlRyYWluaW5nc2RhdWVyIGNhbid0IGJlIGVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiLipcXFMuKiIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGZpZWxkOiAidHJhaW5lciIsCiAgICAgICAgICAgICAgdmFsaWRhdGlvbjogewogICAgICAgICAgICAgICAgbWVzc2FnZTogIlRyYWluZXIgY2FuJ3QgYmUgZW1wdHkiLAogICAgICAgICAgICAgICAgcmVnZXg6ICIuKlxcUy4qIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgXQogICAgICAgIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZmllbGQ6ICJ0cmFpbmVyIiwKICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7CiAgICAgICAgICAgICAgICBtZXNzYWdlOiAiVHJhaW5lciBjYW4ndCBiZSBlbXB0eSIsCiAgICAgICAgICAgICAgICByZWdleDogIi4qXFxTLioiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICBdLAogICAgfSwKICB9Owo8L3NjcmlwdD4KCnsjaWYgbG9hZGluZ30KICA8ZGl2CiAgICBjbGFzcz0iZml4ZWQgei0xMCBpbnNldC0wIG92ZXJmbG93LXktYXV0byBiZy1ibGFjayBiZy1vcGFjaXR5LTUwIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbC10aXRsZSIKICAgIHJvbGU9ImRpYWxvZyIKICAgIGFyaWEtbW9kYWw9InRydWUiCiAgPgogICAgPGRpdiBjbGFzcz0iZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgaC1bNzB2aF0iPgogICAgICA8ZGl2CiAgICAgICAgY2xhc3M9ImFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC0zMiB3LTMyIGJvcmRlci10LTIgYm9yZGVyLWItMiBib3JkZXItZ3JheS05MDAiCiAgICAgID48L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgp7L2lmfQoKPGRpdiBjbGFzcz0iYmctd2hpdGUgcC00IHctWzk1JV0gcm91bmRlZC1zbSI+CiAgPGRpdiBjbGFzcz0idGV4dC1yaWdodCBwYi00Ij4KICAgIDxidXR0b24KICAgICAgY2xhc3M9InRleHQtY2VudGVyIHB5LTMgcHgtNiBzaGFkb3ctc20gYm9yZGVyIGJvcmRlci1ncmF5LTIwMCBob3ZlcjpzaGFkb3ctbWQgdHJhbnNpdGlvbi1hbGwgZm9udC1zZW1pYm9sZCByb3VuZGVkLWZ1bGwgaC04IHctOCAhcC0wIHRleHQtbGciCiAgICAgIG9uOmNsaWNrPXtjbG9zZVBvcHVwfQogICAgPgogICAgICA8c3ZnCiAgICAgICAgd2lkdGg9IjI0IgogICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0IgogICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgc3Ryb2tlPSJjdXJyZW50Q29sb3IiCiAgICAgICAgc3Ryb2tlLXdpZHRoPSIyIgogICAgICAgIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIKICAgICAgICBzdHJva2UtbGluZWpvaW49InJvdW5kIgogICAgICAgIGNsYXNzPSJoLTUgdy01IGlubGluZS1ibG9jayIKICAgICAgICA+PGxpbmUgeDE9IjE4IiB5MT0iNiIgeDI9IjYiIHkyPSIxOCIgLz48bGluZQogICAgICAgICAgeDE9IjYiCiAgICAgICAgICB5MT0iNiIKICAgICAgICAgIHgyPSIxOCIKICAgICAgICAgIHkyPSIxOCIKICAgICAgICAvPjwvc3ZnCiAgICAgID4KICAgIDwvYnV0dG9uPgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJvdmVyZmxvdy1hdXRvIG1heC1oLVs3MCVdIj4KICAgIDxDcmVhdGVFdmVudCB7c2NoZW1hfSBvblN1Y2Nlc3M9e2Nsb3NlUG9wdXB9IC8+CiAgPC9kaXY+CjwvZGl2Pgo=
      - name: calendar
        content: 
      - name: updateEvent
        content: PHNjcmlwdCBsYW5nPSJ0cyI+DQogIGltcG9ydCBVcGRhdGVFdmVudCBmcm9tICIuLi9zZWN0aW9ucy9VcGRhdGUtT25lLVZpZXcuc3ZlbHRlIjsNCiAgaW1wb3J0IFNpbmdsZVZpZXcgZnJvbSAiLi4vc2VjdGlvbnMvU2luZ2xlLVZpZXcuc3ZlbHRlIjsNCg0KICBleHBvcnQgbGV0IGNsb3NlUG9wdXAgPSAoKSA9PiB7fTsNCiAgZXhwb3J0IGxldCBzY2hlbWE6IGFueSA9IHt9Ow0KICBleHBvcnQgbGV0IGlkOiBhbnkgPSAiIjsNCg0KICAvLyBjaGVjayBpZiB0aGUgc2NoZW1hIGlzIHZpZXcgb25seSBvciBlZGl0YWJsZQ0KICAvLyB0aGlzIGlzIGJhc2VkIG9uIHRoZSBjaGVja0lmVHJhaW5pbmdFZGl0YWJsZSBmdW5jdGlvbiBpbiB0aGUgc3JjL2NvbXBvbmVudHMvc2hhcmVkL2NhbGVuZGFyLnN2ZWx0ZSBmaWxlDQogIC8vIHdoaWNoIGNoZWNrcyBpZiB0aGUgdHJhaW5pbmcgcmFwcG9ydCBpcyBlZGl0YWJsZSBiYXNlZCBvbiB0aGUgaGlzdG9yeSBhbmQgdGhlIGRhdGUgb2YgdGhlIHRyYWluaW5nIGZvciB0aGUgdHJhaW5lcg0KICBleHBvcnQgbGV0IGlzVmlld09ubHkgPSBmYWxzZTsNCg0KICAvLyBjaGVjayBpZiB1c2VyIGlzIGEgdHJhaW5lcg0KICBjb25zdCBpc1VzZXJUcmFpbmVyID0gKCkgPT4gew0KICAgIC8vIFRPRE86IHNlbmQgYSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kIHRvIHZlcmlmeSBpZiB0aGUgdG9rZW4gaXMgdmFsaWQNCiAgICByZXR1cm4gKA0KICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oInRva2VuIikgfHwgd2luZG93LmxvY2F0aW9uLnNlYXJjaC5pbmNsdWRlcygidG9rZW4iKQ0KICAgICk7DQogIH07DQoNCiAgc2NoZW1hID0gew0KICAgIC4uLnNjaGVtYSwNCiAgICAiZmllbGQtcHJvcGVydGllcyI6IHsNCiAgICAgIC4uLnNjaGVtYVsiZmllbGQtcHJvcGVydGllcyJdLA0KICAgICAgImhpZGRlbi1maWVsZHMiOiBbImludm9pY2VkSW4iLCAiaW52b2ljZUpzb24iLCAiYXJjaGl2ZWQiXSwNCiAgICAgICJyZWFkb25seS1maWVsZHMiOiBpc1VzZXJUcmFpbmVyKCkgPyBbInRyYWluZXIiLCAiaWQiXSA6IFsiaWQiXSwNCiAgICAgICJmaWVsZC1vcmRlciI6IFsNCiAgICAgICAgImRhdHVtIiwNCiAgICAgICAgInN0YXJ0emVpdCIsDQogICAgICAgICJ0cmFpbmluZ3NkYXVlciIsDQogICAgICAgICJ0cmFpbmVyIiwNCiAgICAgICAgInBsYXR6IiwNCiAgICAgICAgInRyYWluaW5nVHlwZSIsDQogICAgICAgICJrdW5kZSIsDQogICAgICAgICJncnVwcGUiLA0KICAgICAgICAibm90aXplbiIsDQogICAgICAgICJuYWNoaG9sdGVybWluIiwNCiAgICAgICAgInByb2JldHJhaW5pbmciLA0KICAgICAgICAiYXJjaGl2ZWQiLA0KICAgICAgICAiaW52b2ljZWRJbiIsDQogICAgICAgICJpbnZvaWNlSnNvbiIsDQogICAgICBdLA0KICAgICAgImJvb2xlYW4tZmllbGRzIjogWyJwcm9iZXRyYWluaW5nIiwgIm5hY2hob2x0ZXJtaW4iLCAiYXJjaGl2ZWQiXSwNCiAgICAgICJyZWxhdGlvbmFsLWZpZWxkcyI6IFsNCiAgICAgICAgew0KICAgICAgICAgIG5hbWU6ICJrdW5kZUlkIiwNCiAgICAgICAgICB0eXBlOiAiRkFWT1JJVEUiLA0KICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLA0KICAgICAgICAgIGNvbHVtbnM6IFsNCiAgICAgICAgICAgICJiZXhpb0lkIiwNCiAgICAgICAgICAgICJuYW1lIiwNCiAgICAgICAgICAgICJ2b3JuYW1lIiwNCiAgICAgICAgICAgICJwbHoiLA0KICAgICAgICAgICAgIm9ydCIsDQogICAgICAgICAgICAibWFpbCIsDQogICAgICAgICAgICAic3RyYXNzZSIsDQogICAgICAgICAgICAibGFuZCIsDQogICAgICAgICAgICAiZ2VidXJ0c3RhZyIsDQogICAgICAgICAgICAibWFpbDIiLA0KICAgICAgICAgICAgInBob25lIiwNCiAgICAgICAgICAgICJwaG9uZTIiLA0KICAgICAgICAgICAgInBob25lTW9iaWxlIiwNCiAgICAgICAgICAgICJub3RpemVuIiwNCiAgICAgICAgICAgICJpZCIsDQogICAgICAgICAgXSwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIG5hbWU6ICJ0cmFpbmVyIiwNCiAgICAgICAgICBlZGl0YWJsZTogIWlzVXNlclRyYWluZXIoKSwNCiAgICAgICAgICAvLyBjb2x1bW5zOiBbImlkIiwgIm5hbWUiLCAidm9ybmFtZSIsICJlbWFpbCIsICJub3RpemVuIl0sDQogICAgICAgICAgY29sdW1uczogWyJpZCIsICJuYW1lIiwgInZvcm5hbWUiLCAiZW1haWwiXSwNCiAgICAgICAgfSwNCiAgICAgIF0sDQogICAgICAiY3VzdG9tLXZhbGlkYXRpb25zIjogaXNVc2VyVHJhaW5lcigpDQogICAgICAgID8gWw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICBmaWVsZDogInRyYWluaW5nc2RhdWVyIiwNCiAgICAgICAgICAgICAgdmFsaWRhdGlvbjogew0KICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJUcmFpbmluZ3NkYXVlciBjYW4ndCBiZSBlbXB0eSIsDQogICAgICAgICAgICAgICAgcmVnZXg6ICIuKlxcUy4qIiwNCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgIGZpZWxkOiAidHJhaW5lciIsDQogICAgICAgICAgICAgIHZhbGlkYXRpb246IHsNCiAgICAgICAgICAgICAgICBtZXNzYWdlOiAiVHJhaW5lciBjYW4ndCBiZSBlbXB0eSIsDQogICAgICAgICAgICAgICAgcmVnZXg6ICIuKlxcUy4qIiwNCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgXQ0KICAgICAgICA6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgZmllbGQ6ICJ0cmFpbmVyIiwNCiAgICAgICAgICAgICAgdmFsaWRhdGlvbjogew0KICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJUcmFpbmVyIGNhbid0IGJlIGVtcHR5IiwNCiAgICAgICAgICAgICAgICByZWdleDogIi4qXFxTLioiLA0KICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICBdLA0KICAgIH0sDQogIH07DQo8L3NjcmlwdD4NCg0KPGRpdiBjbGFzcz0iYmctd2hpdGUgcC00IHctWzk1JV0gcm91bmRlZC1zbSI+DQogIDxkaXYgY2xhc3M9InRleHQtcmlnaHQgcGItNCI+DQogICAgPGJ1dHRvbg0KICAgICAgY2xhc3M9InRleHQtY2VudGVyIHB5LTMgcHgtNiBzaGFkb3ctc20gYm9yZGVyIGJvcmRlci1ncmF5LTIwMCBob3ZlcjpzaGFkb3ctbWQgdHJhbnNpdGlvbi1hbGwgZm9udC1zZW1pYm9sZCByb3VuZGVkLWZ1bGwgaC04IHctOCAhcC0wIHRleHQtbGciDQogICAgICBvbjpjbGljaz17Y2xvc2VQb3B1cH0NCiAgICA+DQogICAgICA8c3ZnDQogICAgICAgIHdpZHRoPSIyNCINCiAgICAgICAgaGVpZ2h0PSIyNCINCiAgICAgICAgdmlld0JveD0iMCAwIDI0IDI0Ig0KICAgICAgICBmaWxsPSJub25lIg0KICAgICAgICBzdHJva2U9ImN1cnJlbnRDb2xvciINCiAgICAgICAgc3Ryb2tlLXdpZHRoPSIyIg0KICAgICAgICBzdHJva2UtbGluZWNhcD0icm91bmQiDQogICAgICAgIHN0cm9rZS1saW5lam9pbj0icm91bmQiDQogICAgICAgIGNsYXNzPSJoLTUgdy01IGlubGluZS1ibG9jayINCiAgICAgICAgPjxsaW5lIHgxPSIxOCIgeTE9IjYiIHgyPSI2IiB5Mj0iMTgiIC8+PGxpbmUNCiAgICAgICAgICB4MT0iNiINCiAgICAgICAgICB5MT0iNiINCiAgICAgICAgICB4Mj0iMTgiDQogICAgICAgICAgeTI9IjE4Ig0KICAgICAgICAvPjwvc3ZnDQogICAgICA+DQogICAgPC9idXR0b24+DQogIDwvZGl2Pg0KICA8ZGl2IGNsYXNzPSJvdmVyZmxvdy1hdXRvIG1heC1oLVs3MCVdIj4NCiAgICB7I2lmICFpc1ZpZXdPbmx5fQ0KICAgICAgPFVwZGF0ZUV2ZW50DQogICAgICAgIG9uOnVwZGF0ZT17Y2xvc2VQb3B1cH0NCiAgICAgICAgb246ZGVsZXRlZD17Y2xvc2VQb3B1cH0NCiAgICAgICAgb3BlcmF0aW9uSWQ9IlJhcHBvcnRDb250cm9sbGVyLnVwZGF0ZUJ5SWQiDQogICAgICAgIHtpZH0NCiAgICAgICAge3NjaGVtYX0NCiAgICAgIC8+DQogICAgezplbHNlfQ0KICAgICAgPFNpbmdsZVZpZXcgb3BlcmF0aW9uSWQ9IlJhcHBvcnRDb250cm9sbGVyLmZpbmRCeUlkIiB7aWR9IHtzY2hlbWF9IC8+DQogICAgey9pZn0NCiAgPC9kaXY+DQo8L2Rpdj4NCg==
replicaCount: 1
image:
  repository: grpl/grapple-template-pr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.45.pr-33"
imagetest:
  repository: apptest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
