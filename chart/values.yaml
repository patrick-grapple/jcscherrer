# Default values for myapp.

dblocal:
  enabled: true
externalsecrets:
  enabled: true
customersync:
  enabled: true
bexio:
  enabled: true
env:
  - name: SVELTE_APP_USERNAME
    # value: admin
    valueFrom:
      secretKeyRef:
        name: jcs-admin-secret
        key: SVELTE_APP_USERNAME
  - name: SVELTE_APP_PASSWORD
    # value: password
    valueFrom:
      secretKeyRef:
        name: jcs-admin-secret
        key: SVELTE_APP_PASSWORD
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: false
gras:
  enabled: true
  gras: {}
  # ssl: false
  grapi:
    beimagetag: "0.2.9"
    automigrate: false
    autorestartgruim: true
    autoscaling:
      minReplicas: 3
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    extraSecrets:
      - jcs-conn-credential
      - jcs-bexio
    # externalsecrets:
    #   - name: "jcs-bexio"
    #     spec:
    #       refreshInterval: "1h"
    #       secretStoreRef:
    #         name: aws-secret-store-jcs
    #         kind: ClusterSecretStore
    #       target:
    #         name: jcs-bexio
    #         creationPolicy: Owner
    #         deletionPolicy: Retain
    #       dataFrom:
    #         - extract:
    #             key: grapple/jcscherrer/bexio
    initContainers:
      - name: wait-for-db
        spec:
          name: wait-for-db
          image: grpl/jcscherrer-data:data
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" ; then
                echo "database already exists..."
              else
                echo "wait for database"
                while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;"; do
                  echo -n .;
                  sleep 2;
                done;
              fi
      - name: update-db-202501
        spec:
          name: update-db-202501
          image: mysql
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              echo "db available now..."
              if ! mysql -h ${host} -P ${port} -u ${username} -p${password} -e "use jcscherrer; SHOW COLUMNS FROM Rapport LIKE 'kundeIds'; " | grep -i kunde; then
                echo "run the upgrade..."
                mysql -h ${host} -P ${port} -u ${username} -p${password} -e 'use jcscherrer; ALTER TABLE `Rapport` ADD COLUMN `kundeIds` varchar(255) NULL AFTER `kundeId`; SET SQL_SAFE_UPDATES = 0; UPDATE Rapport AS a INNER JOIN Rapport AS b ON a.kundeId = b.kundeId SET a.kundeIds = concat("[",b.kundeId,"]"); SET SQL_SAFE_UPDATES = 1; ALTER TABLE `Rapport` DROP COLUMN `kundeId`; ALTER TABLE `ArchivedRapport` ADD COLUMN `kundeIds` varchar(255) NULL AFTER `kundeId`; SET SQL_SAFE_UPDATES = 0; UPDATE ArchivedRapport AS a INNER JOIN ArchivedRapport AS b ON a.kundeId = b.kundeId SET a.kundeIds = concat("[",b.kundeId,"]"); SET SQL_SAFE_UPDATES = 1; ALTER TABLE `ArchivedRapport` DROP COLUMN `kundeId`;'
              else
                echo "update-db-202501 already patched"
              fi
      - name: jcscherrer
        spec:
          mysql:
            database: jcscherrer
            host: $(host)
            name: jcscherrer
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    discoveries:
      - name: jcscherrer
        spec:
          all: true
          dataSource: jcscherrer
          disableCamelCase: false
          schema: jcscherrer
    relations:
      - name: trainer
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainer
          relationType: belongsTo
          sourceModel: Rapport
      - name: platz
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platz
          relationType: belongsTo
          sourceModel: Rapport
      - name: kunde
        content: '{"sourceModel": "Rapport","destinationModel": "Kunde","relationType": "referencesMany","keyFrom": "kundeIds","keyTo": "id","registerInclusionResolver": true}'
        # spec:
        #   relationName: kunde
        #   destinationModel: Kunde
        #   sourceModel: Rapport
        #   relationType: referencesMany
        #   keyFrom: kundeIds
        #   keyTo: id
        #   registerInclusionResolver: true
      - name: gruppe
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppe
          relationType: belongsTo
          sourceModel: Rapport
      - name: invoice
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoice
          relationType: hasMany
          sourceModel: Rapport
      - name: trainerarchived
        spec:
          destinationModel: Trainer
          foreignKeyName: trainerId
          registerInclusionResolver: true
          relationName: trainerarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: platzarchived
        spec:
          destinationModel: Platz
          foreignKeyName: platzId
          registerInclusionResolver: true
          relationName: platzarchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: kundearchived
        content: '{"sourceModel": "ArchivedRapport","destinationModel": "Kunde","relationType": "referencesMany","keyFrom": "kundeIds","keyTo": "id","registerInclusionResolver": true}'
        # spec:
        #   relationName: kundearchived
        #   destinationModel: Kunde
        #   sourceModel: ArchivedRapport
        #   relationType: referencesMany
        #   keyFrom: kundeIds
        #   keyTo: id
        #   registerInclusionResolver: true
      - name: gruppearchived
        spec:
          destinationModel: Gruppe
          foreignKeyName: gruppeId
          registerInclusionResolver: true
          relationName: gruppearchived
          relationType: belongsTo
          sourceModel: ArchivedRapport
      - name: invoicearchived
        spec:
          destinationModel: Invoices
          foreignKeyName: rapportId
          registerInclusionResolver: true
          relationName: invoicearchived
          relationType: hasMany
          sourceModel: ArchivedRapport
      - name: SummerRateBefore
        spec:
          destinationModel: Product
          foreignKeyName: SummerRateBeforeId
          registerInclusionResolver: true
          relationName: SummerRateBefore
          relationType: belongsTo
          sourceModel: Trainer
      # sadly multiple belongsTo relations still not fixed (waiting on PR to be merged):
      # https://wolke7.atlassian.net/browse/LB4I-52
      # also involves:
      # git mv grapi/postpatches/addAdditionalRelationsToTrainer.sh grapi/postpatches/addAdditionalRelationsToTrainer.disabled
      # git mv grapi/prerelationpatches/addAdditionalRelationsToTrainer.sh grapi/prerelationpatches/addAdditionalRelationsToTrainer.disabled
      # - name: SummerRateAfter
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: SummerRateAfterId
      #     registerInclusionResolver: true
      #     relationName: SummerRateAfter
      #     relationType: belongsTo
      #     sourceModel: Trainer
      # - name: WinterRateBefore
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: WinterRateBeforeId
      #     registerInclusionResolver: true
      #     relationName: WinterRateBefore
      #     relationType: belongsTo
      #     sourceModel: Trainer
      # - name: WinterRateAfter
      #   spec:
      #     destinationModel: Product
      #     foreignKeyName: WinterRateAfterId
      #     registerInclusionResolver: true
      #     relationName: WinterRateAfter
      #     relationType: belongsTo
      #     sourceModel: Trainer
      - name: KUNDE
        content: '{"relationName": "KUNDE", "customReferenceKeys":true, "sourceModel": "Kunde","customSourceModelKey":"bexioId","destinationModel":"Kunde","customTargetModelKey":"bexioId","throughModel":"KundeThrough","relationType":"hasManyThrough","sourceKeyOnThrough":"contactId","targetKeyOnThrough":"contactSubId","registerInclusionResolver":true}'
        # spec doesn't work as customReferences (on source and target) are not yet implemented in grapi
        # spec:
        #   relationName: KUNDE
        #   sourceModel: Kunde
        #   destinationModel: "Kunde"
        #   throughModel: "KundeThrough"
        #   relationType: hasManyThrough
        #   sourceKeyOnThrough: "contactId"
        #   targetKeyOnThrough: "contactSubId"
        #   # # customReferences (on source and target) are not yet implemented in grapi
        #   # customReferenceKeys: "true"
        #   # customSourceModelKey: "bexioId"
        #   # customTargetModelKey: "bexioId"
        #   # # sourceModelPrimaryKey: "bexioId"
        #   # # destinationModelPrimaryKey: "bexioId"
        #   registerInclusionResolver: true
      - name: rapport
        spec:
          destinationModel: Rapport
          foreignKeyName: relatedRapportId
          registerInclusionResolver: true
          relationName: rapport
          relationType: belongsTo
          sourceModel: Invoices
    fuzzysearch:
      - name: kunde
        content: 'jcs:{"fuzzy":true,"centralFuzzy":false,"datasource":"jcscherrer","appName":"Grpl","include":"kunde","subPath":""}'
        # spec:
        #   fuzzy: true
        #   centralFuzzy: false
        #   datasource: "jcscherrer"
        #   appName: "Grpl"
        #   # include: "kundes"
    restcruds:
      - name: "jcscherrer"
        spec:
          datasource: "jcscherrer"
    controllers:
      - name: bexio
        content: 
      - name: ping2
        content: aW1wb3J0IHtpbmplY3R9IGZyb20gJ0Bsb29wYmFjay9jb3JlJzsKaW1wb3J0IHsKICBSZXF1ZXN0LAogIFJlc3RCaW5kaW5ncywKICBnZXQsCiAgcmVzcG9uc2UsCiAgUmVzcG9uc2VPYmplY3QsCn0gZnJvbSAnQGxvb3BiYWNrL3Jlc3QnOwoKLyoqCiAqIE9wZW5BUEkgcmVzcG9uc2UgZm9yIHBpbmcyKCkKICovCmNvbnN0IFBJTkcyX1JFU1BPTlNFOiBSZXNwb25zZU9iamVjdCA9IHsKICBkZXNjcmlwdGlvbjogJ1BpbmcyIFJlc3BvbnNlJywKICBjb250ZW50OiB7CiAgICAnYXBwbGljYXRpb24vanNvbic6IHsKICAgICAgc2NoZW1hOiB7CiAgICAgICAgdHlwZTogJ29iamVjdCcsCiAgICAgICAgdGl0bGU6ICdQaW5nMlJlc3BvbnNlJywKICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICBncmVldGluZzoge3R5cGU6ICdzdHJpbmcnfSwKICAgICAgICAgIGRhdGU6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICB1cmw6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLAogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IHt0eXBlOiAnc3RyaW5nJ30sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB0cnVlLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICB9LAogICAgfSwKICB9LAp9OwoKLyoqCiAqIEEgc2ltcGxlIGNvbnRyb2xsZXIgdG8gYm91bmNlIGJhY2sgaHR0cCByZXF1ZXN0cwogKi8KZXhwb3J0IGNsYXNzIFBpbmcyQ29udHJvbGxlciB7CiAgY29uc3RydWN0b3IoQGluamVjdChSZXN0QmluZGluZ3MuSHR0cC5SRVFVRVNUKSBwcml2YXRlIHJlcTogUmVxdWVzdCkge30KCiAgLy8gTWFwIHRvIGBHRVQgL3BpbmcyYAogIEBnZXQoJy9waW5nMicpCiAgQHJlc3BvbnNlKDIwMCwgUElORzJfUkVTUE9OU0UpCiAgcGluZzIoKTogb2JqZWN0IHsKICAgIC8vIFJlcGx5IHdpdGggYSBncmVldGluZywgdGhlIGN1cnJlbnQgdGltZSwgdGhlIHVybCwgYW5kIHJlcXVlc3QgaGVhZGVycwogICAgcmV0dXJuIHsKICAgICAgZ3JlZXRpbmc6ICdIZWxsbyBmcm9tIGdyYXBwbGUnLAogICAgICBkYXRlOiBuZXcgRGF0ZSgpLAogICAgICB1cmw6IHRoaXMucmVxLnVybCwKICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZXEuaGVhZGVycyksCiAgICB9OwogIH0KfQo=
    prerelationpatches:
      - name: install
        content: ZWNobyAiaW5zdGFsbGluZyBkZXBlbmRlbmNpZXMiCm5wbSBpIGRheWpzCg==
      - name: addAdditionalRelationsToTrainer
        content: IyEvYmluL2Jhc2gKCmVjaG8gImVuYWJsaW5nIGhhc01hbnlUaHJvdWdoIHdpdGggc2FtZSB0YWJsZSAmIG5vLXBrIHJlZmVyZW5jZS4uLiIKCiMgdXBkYXRlIHRyYWluZXIgbW9kZWwgdG8gYWRkIHJlbGF0aW9ucwoKYWRkVHlwZXNBdD0iJChncmVwIC1uICd0eXBlOiBSZWxhdGlvblR5cGUuaGFzTWFueTsnIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9yZWxhdGlvbi50eXBlcy5kLnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZFR5cGVzQXQ9JCgoYWRkVHlwZXNBdCsxKSkKc2VkIC1pICIkYWRkVHlwZXNBdCBpIGN1c3RvbVJlZmVyZW5jZUtleVRvPzogc3RyaW5nOyBcbiBjdXN0b21SZWZlcmVuY2VLZXlGcm9tPzogc3RyaW5nOyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL3JlbGF0aW9uLnR5cGVzLmQudHMKCnNlZCAtaSAicyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmtleVRvOyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvIHx8IHJlbGF0aW9uTWV0YS5rZXlUbzsjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwpzZWQgLWkgInMjY29uc3QgdGFyZ2V0SWQgPSByZWxhdGlvbk1ldGEua2V5VG87I2NvbnN0IHRhcmdldElkID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvIHx8IHJlbGF0aW9uTWV0YS5rZXlUbzsjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKCmFkZElmQ29uZGl0aW9uQXQ9IiQoZ3JlcCAtbiAnY29uc3QgdGFyZ2V0UHJpbWFyeUtleSA9IChfZiA9IHJlbGF0aW9uTWV0YS5rZXlUbyknIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9oYXMtbWFueS9oYXMtbWFueS10aHJvdWdoLmhlbHBlcnMuanMgfCBjdXQgLWQgOiAtZiAxKSIKYWRkSWZDb25kaXRpb25BdD0kKChhZGRJZkNvbmRpdGlvbkF0KzEpKQpzZWQgLWkgIiRhZGRJZkNvbmRpdGlvbkF0IGkgaWYgKHJlbGF0aW9uTWV0YS5jdXN0b21SZWZlcmVuY2VLZXlUbykgeyBcbiB0YXJnZXRQcmltYXJ5S2V5ID0gcmVsYXRpb25NZXRhLmN1c3RvbVJlZmVyZW5jZUtleVRvOyBcbn0iIG5vZGVfbW9kdWxlcy9AbG9vcGJhY2svcmVwb3NpdG9yeS9kaXN0L3JlbGF0aW9ucy9oYXMtbWFueS9oYXMtbWFueS10aHJvdWdoLmhlbHBlcnMuanMKCnNlZCAtaSAicyNjb25zdCB0YXJnZXRQcmltYXJ5S2V5ID0gKF9mID0gcmVsYXRpb25NZXRhLmtleVRvKSNsZXQgdGFyZ2V0UHJpbWFyeUtleSA9IChfZiA9IHJlbGF0aW9uTWV0YS5rZXlUbykjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKc2VkIC1pICJzI2tleUZyb206IHJlbGF0aW9uTWV0YS5rZXlGcm9tLCNrZXlGcm9tOiByZWxhdGlvbk1ldGEuY3VzdG9tUmVmZXJlbmNlS2V5RnJvbSB8fCByZWxhdGlvbk1ldGEua2V5RnJvbSwjZyIgbm9kZV9tb2R1bGVzL0Bsb29wYmFjay9yZXBvc2l0b3J5L2Rpc3QvcmVsYXRpb25zL2hhcy1tYW55L2hhcy1tYW55LXRocm91Z2guaGVscGVycy5qcwoKZWNobyAiLS0tIgo=
    postpatches:
      - name: addAdditionalRelationsToTrainer
        content: IyEvYmluL2Jhc2gKZWNobyAiQ3JlYXRpbmcgZXh0cmEgcmVsYXRpb25zLi4uIgoKIyB1cGRhdGUgdHJhaW5lciBtb2RlbCB0byBhZGQgcmVsYXRpb25zCgpkZWxldGV0ZXh0dW50aWwgKCkgewogICAgSU5GSUxFPSQxCiAgICBGUk9NVEVYVD0kMgogICAgVE9URVhUPSQzCiAgICBERUxFVEVGUk9NPSQoKCQoZ3JlcCAiJHtUT1RFWFR9IiBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMgLW4gfCBjdXQgLWQgOiAtZiAxKS0kKGdyZXAgLUIxMCAiJHtUT1RFWFR9IiBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMgfCBncmVwICIke0ZST01URVhUfSIgLUExMCB8IHdjIC1sKSkpCiAgICBERUxFVEVVTlRJTD0kKGdyZXAgIiR7VE9URVhUfSIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzIC1uIHwgY3V0IC1kIDogLWYgMSkKICAgIGlmIFsgJHtERUxFVEVGUk9NfSAtZ3QgMCBdICYmIFsgJHtERUxFVEVVTlRJTH0gLWd0IDAgXTsgdGhlbgogICAgICAgIHNlZCAtaSAiJHtERUxFVEVGUk9NfSIsIiR7REVMRVRFVU5USUx9Iid7ZDt9JyBzcmMvbW9kZWxzL3RyYWluZXIubW9kZWwudHMKICAgIGVsc2UKICAgICAgICBlY2hvICJub3QgZGVsZXRlZCBhcyBvbmUgb2YgdGhlIHZhcmlhYmxlcyBpcyBlbXB0eS4iCiAgICBmaQp9CgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgInN1bW1lclJhdGVBZnRlcklkPzogbnVtYmVyOyIKZGVsZXRldGV4dHVudGlsIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyAiQHByb3BlcnR5KHsiICJzdW1tZXJSYXRlQmVmb3JlSWQ/OiBudW1iZXI7IgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgIndpbnRlclJhdGVBZnRlcklkPzogbnVtYmVyOyIKZGVsZXRldGV4dHVudGlsIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyAiQHByb3BlcnR5KHsiICJ3aW50ZXJSYXRlQmVmb3JlSWQ/OiBudW1iZXI7IgpkZWxldGV0ZXh0dW50aWwgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzICJAcHJvcGVydHkoeyIgImNsdWJSYXRlSWQ/OiBudW1iZXI7IgoKYWRkQXRNb2RlbD0iJChncmVwIC1uICdTdW1tZXJSYXRlQmVmb3JlSWQ6IG51bWJlcjsnIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cyB8IGN1dCAtZCA6IC1mIDEpIgphZGRBdE1vZGVsPSQoKGFkZEF0TW9kZWwrMSkpCgpzZWQgLWkgIiRhZGRBdE1vZGVsIGkgQGJlbG9uZ3NUbygoKSA9PiBQcm9kdWN0LCB7bmFtZTogJ1N1bW1lclJhdGVBZnRlcid9KSBcbiBTdW1tZXJSYXRlQWZ0ZXJJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCmFkZEF0TW9kZWw9JCgoYWRkQXRNb2RlbCsyKSkKCnNlZCAtaSAiJGFkZEF0TW9kZWwgaSBAYmVsb25nc1RvKCgpID0+IFByb2R1Y3QsIHtuYW1lOiAnV2ludGVyUmF0ZUJlZm9yZSd9KSBcbiBXaW50ZXJSYXRlQmVmb3JlSWQ6IG51bWJlcjsiIHNyYy9tb2RlbHMvdHJhaW5lci5tb2RlbC50cwphZGRBdE1vZGVsPSQoKGFkZEF0TW9kZWwrMikpCgpzZWQgLWkgIiRhZGRBdE1vZGVsIGkgQGJlbG9uZ3NUbygoKSA9PiBQcm9kdWN0LCB7bmFtZTogJ1dpbnRlclJhdGVBZnRlcid9KSBcbiBXaW50ZXJSYXRlQWZ0ZXJJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCmFkZEF0TW9kZWw9JCgoYWRkQXRNb2RlbCsyKSkKCnNlZCAtaSAiJGFkZEF0TW9kZWwgaSBAYmVsb25nc1RvKCgpID0+IFByb2R1Y3QsIHtuYW1lOiAnQ2x1YlJhdGUnfSkgXG4gQ2x1YlJhdGVJZDogbnVtYmVyOyIgc3JjL21vZGVscy90cmFpbmVyLm1vZGVsLnRzCgojIHVwZGF0ZSB0cmFpbmVyIHJlcG9zaXRvcnkgdG8gYWRkIHJlbGF0aW9ucwoKYWRkQXRSZXBvc2l0b3J5PSIkKGdyZXAgLW4gJ3JlYWRvbmx5IFN1bW1lclJhdGVCZWZvcmUnIHNyYy9yZXBvc2l0b3JpZXMvdHJhaW5lci5yZXBvc2l0b3J5LnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCgpzZWQgLWkgIiRhZGRBdFJlcG9zaXRvcnkgaSBwdWJsaWMgcmVhZG9ubHkgU3VtbWVyUmF0ZUFmdGVyOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHB1YmxpYyByZWFkb25seSBXaW50ZXJSYXRlQmVmb3JlOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHB1YmxpYyByZWFkb25seSBXaW50ZXJSYXRlQWZ0ZXI6IEJlbG9uZ3NUb0FjY2Vzc29yPFByb2R1Y3QsIHR5cGVvZiBUcmFpbmVyLnByb3RvdHlwZS5pZD47IiBzcmMvcmVwb3NpdG9yaWVzL3RyYWluZXIucmVwb3NpdG9yeS50cwphZGRBdFJlcG9zaXRvcnk9JCgoYWRkQXRSZXBvc2l0b3J5KzEpKQoKc2VkIC1pICIkYWRkQXRSZXBvc2l0b3J5IGkgcHVibGljIHJlYWRvbmx5IENsdWJSYXRlOiBCZWxvbmdzVG9BY2Nlc3NvcjxQcm9kdWN0LCB0eXBlb2YgVHJhaW5lci5wcm90b3R5cGUuaWQ+OyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0iJChncmVwIC1uICd0aGlzLnJlZ2lzdGVySW5jbHVzaW9uUmVzb2x2ZXInIHNyYy9yZXBvc2l0b3JpZXMvdHJhaW5lci5yZXBvc2l0b3J5LnRzIHwgY3V0IC1kIDogLWYgMSkiCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCgpzZWQgLWkgIiRhZGRBdFJlcG9zaXRvcnkgaSB0aGlzLlN1bW1lclJhdGVBZnRlciA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ1N1bW1lclJhdGVBZnRlcicsIHByb2R1Y3RSZXBvc2l0b3J5R2V0dGVyLCk7IFxuIHRoaXMucmVnaXN0ZXJJbmNsdXNpb25SZXNvbHZlcignU3VtbWVyUmF0ZUFmdGVyJywgdGhpcy5TdW1tZXJSYXRlQWZ0ZXIuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHRoaXMuV2ludGVyUmF0ZUJlZm9yZSA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ1dpbnRlclJhdGVCZWZvcmUnLCBwcm9kdWN0UmVwb3NpdG9yeUdldHRlciwpOyBcbiB0aGlzLnJlZ2lzdGVySW5jbHVzaW9uUmVzb2x2ZXIoJ1dpbnRlclJhdGVCZWZvcmUnLCB0aGlzLldpbnRlclJhdGVCZWZvcmUuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCmFkZEF0UmVwb3NpdG9yeT0kKChhZGRBdFJlcG9zaXRvcnkrMSkpCnNlZCAtaSAiJGFkZEF0UmVwb3NpdG9yeSBpIHRoaXMuV2ludGVyUmF0ZUFmdGVyID0gdGhpcy5jcmVhdGVCZWxvbmdzVG9BY2Nlc3NvckZvcignV2ludGVyUmF0ZUFmdGVyJywgcHJvZHVjdFJlcG9zaXRvcnlHZXR0ZXIsKTsgXG4gdGhpcy5yZWdpc3RlckluY2x1c2lvblJlc29sdmVyKCdXaW50ZXJSYXRlQWZ0ZXInLCB0aGlzLldpbnRlclJhdGVBZnRlci5pbmNsdXNpb25SZXNvbHZlcik7IiBzcmMvcmVwb3NpdG9yaWVzL3RyYWluZXIucmVwb3NpdG9yeS50cwoKYWRkQXRSZXBvc2l0b3J5PSQoKGFkZEF0UmVwb3NpdG9yeSsxKSkKc2VkIC1pICIkYWRkQXRSZXBvc2l0b3J5IGkgdGhpcy5DbHViUmF0ZSA9IHRoaXMuY3JlYXRlQmVsb25nc1RvQWNjZXNzb3JGb3IoJ0NsdWJSYXRlJywgcHJvZHVjdFJlcG9zaXRvcnlHZXR0ZXIsKTsgXG4gdGhpcy5yZWdpc3RlckluY2x1c2lvblJlc29sdmVyKCdDbHViUmF0ZScsIHRoaXMuQ2x1YlJhdGUuaW5jbHVzaW9uUmVzb2x2ZXIpOyIgc3JjL3JlcG9zaXRvcmllcy90cmFpbmVyLnJlcG9zaXRvcnkudHMKCiMgdXBkYXRlIGNvbnRyb2xsZXIgdG8gYWRkIHJlbGF0aW9ucwoKc2VkIC1pICJzI3JldHVybiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVCZWZvcmUoaWQpOyNyZXR1cm4gWyBcbiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVCZWZvcmUoaWQpLCBcbiB0aGlzLnRyYWluZXJSZXBvc2l0b3J5LlN1bW1lclJhdGVBZnRlcihpZCksIFxuIHRoaXMudHJhaW5lclJlcG9zaXRvcnkuV2ludGVyUmF0ZUJlZm9yZShpZCksIFxuIHRoaXMudHJhaW5lclJlcG9zaXRvcnkuV2ludGVyUmF0ZUFmdGVyKGlkKSwgXG4gdGhpcy50cmFpbmVyUmVwb3NpdG9yeS5DbHViUmF0ZShpZCkgXG5dOyNnIiBzcmMvY29udHJvbGxlcnMvdHJhaW5lci1wcm9kdWN0LmNvbnRyb2xsZXIudHMKc2VkIC1pICJzI1Byb21pc2U8UHJvZHVjdD4jUHJvbWlzZTxQcm9taXNlPFByb2R1Y3Q+W10+I2ciIHNyYy9jb250cm9sbGVycy90cmFpbmVyLXByb2R1Y3QuY29udHJvbGxlci50cwoKZWNobyAiLS0tIgo=
    injections: []
  gruim:
    uiimagetag: "0.2.9"
    autoscaling:
      minReplicas: 3
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#004a99","fg":"#ffffff"},"accent":{"DEFAULT":"#fa7252","fg":"#ffffff"}}}'
    config: '{"global":{"list-size":10,"field-properties":{"id":{"readonly":false}}, "weekStart": 1},"schema":{"Trainer":{"field-order":["id","vorname","name","email","aktiv","SummerRateBefore","SummerRateAfter","WinterRateBefore","WinterRateAfter","ClubRate","notizen","token"]},"Kunde":{"field-order":["id","bexioId","name","vorname","mail","ort","plz","strasse","land"]},"Gruppe":{"field-order":["id","gruppenname","beschreibung","gruppentyp","notizen"]},"Product":{"field-order":["id","bexioId","interncode","internname","interndescription","saleprice","taxid","articlegroupid"]},"Rapport":{"field-order":["id","datum","invoicedIn","trainer","kunde","gruppe","platz","startzeit","trainingsdauer","trainingType","nachholtermin","probetraining","archived","notizen"]}}}'
    additionalpackages: "svelte-fullcalendar@2.0.0-beta.0 @fullcalendar/common@5.10.1 @fullcalendar/core@5.10.1 @fullcalendar/daygrid@5.10.1 @fullcalendar/interaction@5.10.1 @fullcalendar/timegrid@5.10.1 dayjs@1.11.2"
    custommodules:
      - name: singleDay
        content: 
      - name: trainerDropDown
        content: PHNjcmlwdCBsYW5nPSJ0cyI+CiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gInN2ZWx0ZSI7CgogIGltcG9ydCBTZWxlY3QgZnJvbSAic3ZlbHRlLXNlbGVjdC9TZWxlY3Quc3ZlbHRlIjsKICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICJzdmVsdGUiOwogIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7CgogIGV4cG9ydCBsZXQgc2VsZWN0ZWRWYWx1ZToKICAgIHwgewogICAgICAgIHZhbHVlOiBudW1iZXI7CiAgICAgICAgbGFiZWw6IHN0cmluZzsKICAgICAgfQogICAgfCB7fSA9IHt9OwoKICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gIlRyYWluZXIiOwoKICBsZXQgaGFuZGxlQ2hhbmdlID0gKCkgPT4gewogICAgZGlzcGF0Y2goInVwZGF0ZVRyYWluZXIiLCB7CiAgICAgIHNlbGVjdGVkVmFsdWUsCiAgICB9KTsKICB9OwoKICBsZXQgbGlzdDogYW55ID0gW107CgogIG9uTW91bnQoYXN5bmMgZnVuY3Rpb24gKCkgewogICAgbGV0IHNhdmVkVHJhaW5lciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0cmFpbmVyIik7CgogICAgaWYgKHNhdmVkVHJhaW5lcikgewogICAgICBzZWxlY3RlZFZhbHVlID0gSlNPTi5wYXJzZShzYXZlZFRyYWluZXIpOwogICAgfQoKICAgIC8vIGdldCB0aGUgbGlzdCBvZiB0cmFpbmVycwogICAgLy8gc2V0IHRoZSBsaXN0IG9mIHRyYWluZXJzIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50CiAgICBsZXQgcmFwcG9ydHMgPSBhd2FpdCBmZXRjaCgKICAgICAgYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvdHJhaW5lcnM/ZmlsdGVyPXsid2hlcmUiOnsiYWt0aXYiOnRydWV9fWAKICAgICk7CiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmFwcG9ydHMuanNvbigpOwoKICAgIGxpc3QgPSBbCiAgICAgIHsKICAgICAgICB2bGF1ZTogMCwKICAgICAgICBsYWJlbDogIkFsbCBUcmFpbmVycyIsCiAgICAgIH0sCiAgICAgIC4uLmRhdGEubWFwKChyOiBhbnkpID0+ICh7CiAgICAgICAgdmFsdWU6IHIuaWQsCiAgICAgICAgbGFiZWw6IHIubmFtZSwKICAgICAgfSkpLAogICAgXTsKICB9KTsKPC9zY3JpcHQ+Cgo8ZGl2IGNsYXNzPSJtYXgtdy1zbSB0aGVtZWQiPgogIDxTZWxlY3QKICAgIGl0ZW1zPXtsaXN0fQogICAgYmluZDp2YWx1ZT17c2VsZWN0ZWRWYWx1ZX0KICAgIGJpbmQ6cGxhY2Vob2xkZXIKICAgIG9uOnNlbGVjdD17aGFuZGxlQ2hhbmdlfQogIC8+CjwvZGl2PgoKPHN0eWxlIGxhbmc9InBvc3Rjc3MiPgogIC50aGVtZWQgewogICAgLS1ib3JkZXJIb3ZlckNvbG9yOiAjMWE1Y2EzOwogICAgLS1ib3JkZXJSYWRpdXM6IDRweDsKICAgIC0taXRlbUhvdmVyQkc6ICNmZmYxZWU7CiAgICAtLWl0ZW1Jc0FjdGl2ZUJHOiAjZmE3MjUyOwogIH0KPC9zdHlsZT4K
      - name: createEvent
        content: 
      - name: singleDay2
        content: 
      - name: calendar
        content: 
      - name: updateEvent
        content: 
      - name: archivedTrainings
        content: PHNjcmlwdCBsYW5nPSJ0cyI+CiAgaW1wb3J0IEZ1bGxDYWxlbmRhciwgewogICAgQ2FsZW5kYXJPcHRpb25zLAogICAgRGF5Q2VsbENvbnRlbnRBcmcsCiAgICBWaWV3QXBpLAogIH0gZnJvbSAic3ZlbHRlLWZ1bGxjYWxlbmRhciI7CgogIGltcG9ydCBkYXlncmlkUGx1Z2luIGZyb20gIkBmdWxsY2FsZW5kYXIvZGF5Z3JpZCI7CiAgaW1wb3J0IGludGVyYWN0aW9uUGx1Z2luIGZyb20gIkBmdWxsY2FsZW5kYXIvaW50ZXJhY3Rpb24iOyAvLyBmb3Igc2VsZWN0YWJsZQogIGltcG9ydCBHbG9iYWwgZnJvbSAiLi4vY29tcG9uZW50cy9nbG9iYWwuc3ZlbHRlIjsKICBHbG9iYWw7CiAgaW1wb3J0IHsgb25Nb3VudCwgdGljayB9IGZyb20gInN2ZWx0ZSI7CiAgaW1wb3J0IGRheWpzIGZyb20gImRheWpzIjsKICBpbXBvcnQgU2luZ2xlRGF5IGZyb20gIi4vc2luZ2xlRGF5LnN2ZWx0ZSI7CiAgaW1wb3J0IFRyYWluZXJEcm9wRG93biBmcm9tICIuL3RyYWluZXJEcm9wRG93bi5zdmVsdGUiOwogIGltcG9ydCBDcmVhdGVFdmVudCBmcm9tICIuL2NyZWF0ZUV2ZW50LnN2ZWx0ZSI7CiAgaW1wb3J0IFVwZGF0ZUV2ZW50IGZyb20gIi4vdXBkYXRlRXZlbnQuc3ZlbHRlIjsKICBpbXBvcnQgeyBhZGRNZXNzYWdlcywgaW5pdCB9IGZyb20gInN2ZWx0ZS1pMThuIjsKICBpbXBvcnQgZW4gZnJvbSAiLi4vLi4vaTE4bi90cmFuc2xhdGlvbi5qc29uIjsKCiAgaW1wb3J0IFRvYXN0c0NvbXBvbmVudCBmcm9tICIuLi9jb21wb25lbnRzL3RvYXN0cy1jb21wb25lbnQuc3ZlbHRlIjsKICBpbXBvcnQgeyBjbGVhckFsbFRvYXN0cyB9IGZyb20gIi4uL3N0b3Jlcy90b2FzdHMiOwoKICBpbXBvcnQgU2ltcGxlRGlzbWlzc01vZGFsIGZyb20gIi4uL2NvbXBvbmVudHMvX3NoYXJlZC9tb2RhbC9zaW1wbGUtZGlzbWlzcy1tb2RhbC5zdmVsdGUiOwoKICBjbGVhckFsbFRvYXN0cygpOwoKICBhZGRNZXNzYWdlcygiZW4iLCBlbik7CgogIGluaXQoewogICAgZmFsbGJhY2tMb2NhbGU6ICJlbiIsCiAgICBpbml0aWFsTG9jYWxlOiAiZW4iLAogIH0pOwoKICBsZXQgaW5uZXJXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOwogIGxldCBldmVudHM6IHsgc3RhcnQ6IHN0cmluZyB9W10gPSBbXTsKICBsZXQgc2VsZWN0ZWRSYXBwb3J0czogYW55ID0gW107CiAgbGV0IHNlbGVjdGVkRGF0ZTogc3RyaW5nID0gZGF5anMoKS5mb3JtYXQoKTsKICBsZXQgcmFwcG9ydFRvVXBkYXRlSWQ6IHN0cmluZyA9ICIiOwoKICBsZXQgb3B0aW9uczogQ2FsZW5kYXJPcHRpb25zID0gewogICAgaW5pdGlhbFZpZXc6ICJkYXlHcmlkTW9udGgiLAogICAgcGx1Z2luczogW2RheWdyaWRQbHVnaW4sIGludGVyYWN0aW9uUGx1Z2luXSwKICAgIGZpcnN0RGF5OiAxLAogICAgaGVpZ2h0OiAiMTAwJSIsCiAgfTsKCiAgLy8gICBleHBvcnQgbGV0IHNjaGVtYTogYW55ID0ge307CgogIC8vIGNoYW5nZSBzaG93Q2FsIHZhbHVlIGJhc2VkIG9uIHdpbmRvdyBzaXplIGFuZCByZXJlbmRlciBjYWxlbmRhcgogICQ6IGlmIChpbm5lcldpZHRoID4gNzY4KSB7CiAgICBzaG93Q2FsID0gdHJ1ZTsKICB9CiAgJDogaWYgKGlubmVyV2lkdGggPCA3NjgpIHsKICAgIHNob3dDYWwgPSBmYWxzZTsKICB9CgogIC8vIG9uIGlubmVyV2lkdGggY2hhbmdlLCBjaGFuZ2Ugb3B0aW9ucyBhbmQgcmVyZW5kZXIgY2FsZW5kYXIKICAkOiB7CiAgICBpbm5lcldpZHRoOwogICAgb3B0aW9ucyA9IHsKICAgICAgLi4ub3B0aW9ucywKICAgIH07CiAgfQogICQ6IHsKICAgIHNob3dDYWw7CiAgICBvcHRpb25zID0gewogICAgICAuLi5vcHRpb25zLAogICAgfTsKICB9CgogIGxldCBzaG93Q3JlYXRlRm9ybSA9IGZhbHNlOwogIGxldCBzaG93RWRpdEZvcm0gPSBmYWxzZTsKICBsZXQgc2hvd0NhbCA9IGZhbHNlOwogIGxldCBzZWxlY3RlZER1cmF0aW9uOiBzdHJpbmcgPSAiIjsKICBsZXQgc2hvd1ZpZXdGcm9tID0gZmFsc2U7CgogIGxldCBzZWxlY3RlZFRyYWluZXI6IGFueSA9ICIiOwoKICBsZXQgVVJMID0gYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvYXJjaGl2ZWQtcmFwcG9ydHM/ZmlsdGVyPXsiaW5jbHVkZSI6WyJ0cmFpbmVyIiwicGxhdHoiLCJrdW5kZXMiLCJncnVwcGUiXX1gOwoKICBsZXQgdXBkYXRlUmFwcG9ydHMgPSBhc3luYyAoKSA9PiB7CiAgICAvLyBnZXQgdGhlIGxpc3Qgb2YgcmFwcG9ydHMgZm9yIHRoZSBzZWxlY3RlZCB0cmFpbmVyCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgidHJhaW5lciIsIEpTT04uc3RyaW5naWZ5KHNlbGVjdGVkVHJhaW5lcikpOwoKICAgIGlmIChzZWxlY3RlZFRyYWluZXI/LnZhbHVlKSB7CiAgICAgIFVSTCA9IGAke3Byb2Nlc3MuZW52LlNWRUxURV9BUFBfUkVNT1RFX1VSTH0vYXBpL2FyY2hpdmVkLXJhcHBvcnRzP2ZpbHRlcj17ImluY2x1ZGUiOlsidHJhaW5lciIsInBsYXR6Iiwia3VuZGVzIiwiZ3J1cHBlIl0sIndoZXJlIjp7InRyYWluZXJJZCI6JHtzZWxlY3RlZFRyYWluZXIudmFsdWV9fX1gOwogICAgfSBlbHNlIHsKICAgICAgVVJMID0gYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvYXJjaGl2ZWQtcmFwcG9ydHM/ZmlsdGVyPXsiaW5jbHVkZSI6WyJ0cmFpbmVyIiwicGxhdHoiLCJrdW5kZXMiLCJncnVwcGUiXX1gOwogICAgfQoKICAgIGxldCByYXBwb3J0cyA9IGF3YWl0IGZldGNoKFVSTCk7CgogICAgY29uc3QgZGF0YSA9IGF3YWl0IHJhcHBvcnRzLmpzb24oKTsKCiAgICBldmVudHMgPSBkYXRhLm1hcCgocjogYW55KSA9PiAoewogICAgICBzdGFydDogZGF5anMoci5kYXR1bSkuZm9ybWF0KCJZWVlZLU1NLUREIiksCiAgICAgIGRpc3BsYXk6ICJiYWNrZ3JvdW5kIiwKICAgICAgYmFja2dyb3VuZENvbG9yOiAiI2ZhNzI1MiIsCiAgICB9KSk7CgogICAgLy8gdXBkYXRlIGNhbGVuZGFyIG9wdGlvbnMgdG8gcmVuZGVyIHRoZSB1cGRhdGVkIGV2ZW50cwogICAgb3B0aW9ucyA9IHsKICAgICAgLi4ub3B0aW9ucywKICAgICAgZXZlbnRzOiBldmVudHMsCiAgICB9OwoKICAgIGlmIChzZWxlY3RlZERhdGUpIHsKICAgICAgc2VsZWN0ZWRSYXBwb3J0cyA9IGRhdGEuZmlsdGVyKChyOiBhbnkpID0+IHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgZGF5anMoci5kYXR1bSkuZm9ybWF0KCJZWVlZLU1NLUREIikgPT0KICAgICAgICAgIGRheWpzKHNlbGVjdGVkRGF0ZSkuZm9ybWF0KCJZWVlZLU1NLUREIikKICAgICAgICApOwogICAgICB9KTsKICAgICAgc2VsZWN0ZWRSYXBwb3J0cyA9IHNlbGVjdGVkUmFwcG9ydHM7CiAgICB9CiAgfTsKCiAgbGV0IGZldGNoUmFwcG9ydCA9IGFzeW5jICgpID0+IHsKICAgIC8vIHJlcXVlc3QgZm9yIHRoZSBsaXN0IG9mIHJhcG9ydHMgZm9yIHRoYXQgbW9udGggcG9wdWxhdGUgaXQgaW4gdGhlIGNhbGVuZGFyCiAgICBsZXQgc2F2ZWRUcmFpbmVyOiB7CiAgICAgIHZhbHVlOiBudW1iZXI7CiAgICAgIGxhYmVsOiBzdHJpbmc7CiAgICB9ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidHJhaW5lciIpIHx8ICJ7fSIpOwoKICAgIGlmIChzYXZlZFRyYWluZXI/LnZhbHVlKSB7CiAgICAgIFVSTCA9IGAke3Byb2Nlc3MuZW52LlNWRUxURV9BUFBfUkVNT1RFX1VSTH0vYXBpL2FyY2hpdmVkLXJhcHBvcnRzP2ZpbHRlcj17ImluY2x1ZGUiOlsidHJhaW5lciIsInBsYXR6Iiwia3VuZGVzIiwiZ3J1cHBlIl0sIndoZXJlIjp7InRyYWluZXJJZCI6JHtzYXZlZFRyYWluZXIudmFsdWV9fX1gOwogICAgfSBlbHNlIHsKICAgICAgVVJMID0gYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvYXJjaGl2ZWQtcmFwcG9ydHM/ZmlsdGVyPXsiaW5jbHVkZSI6WyJ0cmFpbmVyIiwicGxhdHoiLCJrdW5kZXMiLCJncnVwcGUiXX1gOwogICAgfQoKICAgIGxldCByYXBwb3J0cyA9IGF3YWl0IGZldGNoKFVSTCk7CiAgICBhd2FpdCB0aWNrKCk7CgogICAgY29uc3QgZGF0YSA9IGF3YWl0IHJhcHBvcnRzLmpzb24oKTsKCiAgICBldmVudHMgPSBkYXRhLm1hcCgocjogYW55KSA9PiAoewogICAgICBzdGFydDogZGF5anMoci5kYXR1bSkuZm9ybWF0KCJZWVlZLU1NLUREIiksCiAgICAgIGRpc3BsYXk6ICJiYWNrZ3JvdW5kIiwKICAgICAgYmFja2dyb3VuZENvbG9yOiAiI2ZhNzI1MiIsIC8vYWNjZW50IGNvbG9yIGZvciB0aGUgY2FsZW5kYXIKICAgIH0pKTsKCiAgICBzZWxlY3RlZFJhcHBvcnRzID0gZGF0YS5maWx0ZXIoKHI6IGFueSkgPT4gewogICAgICByZXR1cm4gKAogICAgICAgIGRheWpzKHIuZGF0dW0pLmZvcm1hdCgiWVlZWS1NTS1ERCIpID09CiAgICAgICAgZGF5anMoc2VsZWN0ZWREYXRlKS5mb3JtYXQoIllZWVktTU0tREQiKQogICAgICApOwogICAgfSk7CgogICAgb3B0aW9ucyA9IHsKICAgICAgLi4ub3B0aW9ucywKICAgICAgZXZlbnRzOiBldmVudHMsCiAgICAgIC8vICAgZXZlbnRDbGljazogYXN5bmMgZnVuY3Rpb24gKGluZm86IGFueSkgewogICAgICAvLyAgICAgc2VsZWN0ZWREYXRlID0gZGF5anMoaW5mby5ldmVudC5zdGFydCkuZm9ybWF0KCJZWVlZLU1NLUREIik7CiAgICAgIC8vICAgICBhd2FpdCB1cGRhdGVSYXBwb3J0cygpOwogICAgICAvLyAgICAgLy8gaGlkZSB0aGUgY2FsZW5kYXIKICAgICAgLy8gICAgIHNob3dDYWwgPSBmYWxzZTsKICAgICAgLy8gICB9LAogICAgICBkYXRlQ2xpY2s6IGZ1bmN0aW9uIChpbmZvOiBhbnkpIHsKICAgICAgICBzZWxlY3RlZERhdGUgPSBkYXlqcyhpbmZvLmRhdGVTdHIpLmZvcm1hdCgiWVlZWS1NTS1ERCIpOwogICAgICAgIHNob3dDYWwgPSBmYWxzZTsKICAgICAgfSwKICAgICAgZGF5Q2VsbENsYXNzTmFtZXM6IChhcmc6IERheUNlbGxDb250ZW50QXJnKSA9PiB7CiAgICAgICAgaWYgKAogICAgICAgICAgZGF5anMoc2VsZWN0ZWREYXRlKS5mb3JtYXQoIllZWVktTU0tREQiKSA9PT0KICAgICAgICAgIGRheWpzKGFyZy5kYXRlKS5mb3JtYXQoIllZWVktTU0tREQiKQogICAgICAgICkgewogICAgICAgICAgcmV0dXJuIFsic2VsZWN0ZWQtZGF5LWNlbGwiXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICIiOwogICAgICB9LAogICAgICBmaXJzdERheTogMSwKCiAgICAgIHdpbmRvd1Jlc2l6ZTogKGluZm86IHsgdmlldzogVmlld0FwaSB9KSA9PiB7CiAgICAgICAgaW5mby52aWV3LmNhbGVuZGFyLnVwZGF0ZVNpemUoKTsKICAgICAgfSwKICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLAogICAgfTsKICB9OwogICQ6IHsKICAgIHNlbGVjdGVkRGF0ZTsKICAgIGZldGNoUmFwcG9ydCgpOwogIH0KICBvbk1vdW50KCgpID0+IHsKICAgIGZldGNoUmFwcG9ydCgpOwogICAgZmV0Y2hUcmFpbmVyRnJvbVRva2VuKCk7CiAgfSk7CgogIC8vIHJlLWV4ZWN1dGUgdGhlIGZldGNoUmFwcG9ydCBmdW5jdGlvbiBldmVyeSB0aW1lIHNob3dDcmVhdGVGb3JtIGFuZCBzaG93RWRpdEZvcm0gaXMgZmFsc2UKICAkOiB7CiAgICBpZiAoCiAgICAgIHNob3dDcmVhdGVGb3JtID09PSBmYWxzZSAmJgogICAgICBzaG93RWRpdEZvcm0gPT09IGZhbHNlICYmCiAgICAgIHNob3dDcmVhdGVGb3JtID09PSBmYWxzZQogICAgKSB7CiAgICAgIGZldGNoUmFwcG9ydCgpOwogICAgfQogIH0KCiAgbGV0IGNsb3NlQ29uZmlybWF0aW9uID0gZmFsc2U7CgogIGxldCB1bnNhdmVkQ2hhbmdlcyA9IGZhbHNlOwoKICBsZXQgZXNjRnVuY3Rpb24gPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHsKICAgIGlmIChldmVudC5rZXkgPT09ICJFc2NhcGUiKSB7CiAgICAgIGlmICh1bnNhdmVkQ2hhbmdlcykgewogICAgICAgIGNsb3NlQ29uZmlybWF0aW9uID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzaG93Q3JlYXRlRm9ybSA9IGZhbHNlOwogICAgICAgIHNob3dFZGl0Rm9ybSA9IGZhbHNlOwogICAgICB9CiAgICB9CiAgfTsKCiAgLy8gbGlzdGVuIGZvciBhbnkgaW5wdXQgY2hhbmdlcyBhbmQgc2V0IHRoZSB1bnNhdmVkQ2hhbmdlcyB0byB0cnVlIGlmIHRoZXJlIGFyZSBhbnkgY2hhbmdlcwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJpbnB1dCIsICgpID0+IHsKICAgIHVuc2F2ZWRDaGFuZ2VzID0gdHJ1ZTsKICB9KTsKCiAgLy8gbGlzdGVuIGZvciBhbnkgc2VsZWN0IG9wdGlvbnMgY2hhbmdlIGFuZCBzZXQgdGhlIHVuc2F2ZWRDaGFuZ2VzIHRvIHRydWUgaWYgdGhlcmUgYXJlIGFueSBjaGFuZ2VzCiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsICgpID0+IHsKICAgIHVuc2F2ZWRDaGFuZ2VzID0gdHJ1ZTsKICB9KTsKCiAgJDogewogICAgY29uc3Qgc2VsZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzZWxlY3QiKTsKCiAgICBmb3IgKGxldCBzZWxlY3Qgb2Ygc2VsZWN0cykgewogICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgKCkgPT4gewogICAgICAgIHVuc2F2ZWRDaGFuZ2VzID0gdHJ1ZTsKICAgICAgfSk7CiAgICB9CiAgfQoKICAvLyBsaXN0ZW4gZm9yIGFueSBzdWJtaXQgY2hhbmdlcyBhbmQgc2V0IHRoZSB1bnNhdmVkQ2hhbmdlcyB0byBmYWxzZQogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJzdWJtaXQiLCAoKSA9PiB7CiAgICB1bnNhdmVkQ2hhbmdlcyA9IGZhbHNlOwogIH0pOwoKICAvLyBsaXN0ZW4gZm9yIGVzYyBrZXkgcHJlc3MgYW5kIGNsb3NlIHRoZSBjb25maXJtYXRpb24gbW9kYWwKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGVzY0Z1bmN0aW9uLCBmYWxzZSk7CgogIC8qKgogICAqIHNlbGVjdGVkIHRyYWluZXIgY29udGFpbnMgdmFsdWUgYW5kIGxhYmVsIG9mIHRoZSBzZWxlY3RlZCB0cmFpbmVyCiAgICogKiovCgogIC8vIGNoZWNrIGlmIHRoZSBjdXJyZW50IHVybCBpcyBpbiB0aGUgL2FkbWluIHBhdGggYW5kIGlmIGl0IGlzIHRoZW4gc2hvdyB0aGUgYWRtaW4gbWVudQogIC8vIFRPRE86IGFkZCBhIHByb3BlciBjaGVjayBmb3IgdGhlIGFkbWluIHVzZXIKICBsZXQgaXNBZG1pbiA9IGZhbHNlOwogICQ6IHsKICAgIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoIi9hZG1pbiIpKSB7CiAgICAgIGlzQWRtaW4gPSB0cnVlOwogICAgfQogIH0KCiAgLy8gIGdldCB0aGUgY3VycmVudCB1cmwgc2VhcmNoIHF1ZXJ5IGFuZCBjaGVjayBmb3IgdHJhaW5lciBhbmQgdHJhaW5lck5hbWUgcXVlcnkgc3RyaW5ncwoKICBsZXQgdHJhaW5lcklkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7CiAgbGV0IHRyYWluZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7CiAgLy8gZ2V0IHRva2VuIGZyb20gbG9jYWwgc3RvcmFnZQogIC8vIGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0b2tlbiIpOwogIC8vIHRoZW4gZmV0Y2ggdHJhaW5lciBkYXRhIHdoZXJlIHRva2VuIGlzIGVxdWFsIHRvIHRoZSB0b2tlbiBpbiB0aGUgbG9jYWwgc3RvcmFnZQogIGNvbnN0IGZldGNoVHJhaW5lckZyb21Ub2tlbiA9IGFzeW5jICgpID0+IHsKICAgIGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ0b2tlbiIpOwogICAgbGV0IHRyYWluZXIgPSBhd2FpdCBmZXRjaCgKICAgICAgYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvdHJhaW5lcnM/ZmlsdGVyPXsid2hlcmUiOnsidG9rZW4iOiIke3Rva2VufSJ9fWAKICAgICk7CiAgICBhd2FpdCB0aWNrKCk7CgogICAgY29uc3QgZGF0YSA9IGF3YWl0IHRyYWluZXIuanNvbigpOwoKICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgdHJhaW5lcklkID0gZGF0YVswXS5pZDsKICAgICAgdHJhaW5lck5hbWUgPSBkYXRhWzBdLm5hbWU7CiAgICB9CiAgfTsKCiAgJDogewogICAgaWYgKHRyYWluZXJJZCAmJiB0cmFpbmVyTmFtZSkgewogICAgICBzZWxlY3RlZFRyYWluZXIgPSB7CiAgICAgICAgdmFsdWU6IHRyYWluZXJJZCwKICAgICAgICBsYWJlbDogdHJhaW5lck5hbWUsCiAgICAgIH07CiAgICAgIHVwZGF0ZVJhcHBvcnRzKCk7CiAgICB9CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGNoZWNrSWZUcmFpbmluZ0VkaXRhYmxlKAogICAgdHJhaW5pbmdEYXRlOiBEYXRlLAogICAgaXNBZG1pbjogYm9vbGVhbiwKICAgIGlzQXJjaGl2ZWQ/OiBib29sZWFuLAogICAgaW52b2ljZWRJbj86IGJvb2xlYW4KICApOiBQcm9taXNlPGJvb2xlYW4+IHsKICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTsKICAgIGNvbnN0IGRlYWRsaW5lID0gbmV3IERhdGUodHJhaW5pbmdEYXRlKTsKICAgIGRlYWRsaW5lLnNldERhdGUodHJhaW5pbmdEYXRlLmdldERhdGUoKSArIDEpOwogICAgZGVhZGxpbmUuc2V0SG91cnMoMTQsIDAsIDAsIDApOwoKICAgIGlmIChpc0FkbWluKSB7CiAgICAgIGlmIChpc0FyY2hpdmVkIHx8IGludm9pY2VkSW4pIHsKICAgICAgICAvKioKICAgICAgICAgKiBmZXRjaCB0aGUgZGF0YSBmcm9tIC9hcGkvaW52b2ljZS1nZW5lcmF0aW9uLWNvbmZpZ3MvMwogICAgICAgICAqIGNoZWNrIGlmIGRhdGEuY29uZmlnVmFsdWUgaXMgdHJ1ZSBvciBmYWxzZSBhbmQgcmV0dXJuIHRoZSB2YWx1ZQogICAgICAgICAqIHRoaXMgaXMgdG8gY2hlY2sgaWYgaGlzdG9yeSBpcyBlZGl0YWJsZSBmb3IgdGhlIGFkbWluCiAgICAgICAgICogbmV3IGhpc3Rvcnkgc2hvdWxkIG5vdCBiZSBlZGl0YWJsZQogICAgICAgICAqKi8KICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKAogICAgICAgICAgYCR7cHJvY2Vzcy5lbnYuU1ZFTFRFX0FQUF9SRU1PVEVfVVJMfS9hcGkvaW52b2ljZS1nZW5lcmF0aW9uLWNvbmZpZ3MvM2AKICAgICAgICApOwogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CgogICAgICAgIHJldHVybiBkYXRhLmNvbmZpZ1ZhbHVlID09PSAidHJ1ZSIgPyBmYWxzZSA6IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjdXJyZW50RGF0ZSA8IGRlYWRsaW5lOwogICAgfQogIH0KPC9zY3JpcHQ+Cgo8c3ZlbHRlOndpbmRvdyBiaW5kOmlubmVyV2lkdGggLz4KCjwhLS0geyNpZiBjbG9zZUNvbmZpcm1hdGlvbiAmJiAoc2hvd0NyZWF0ZUZvcm0gfHwgc2hvd0VkaXRGb3JtIHx8IHNob3dWaWV3RnJvbSl9CiAgPFNpbXBsZURpc21pc3NNb2RhbAogICAgb246Y2xvc2U9eygpID0+IChjbG9zZUNvbmZpcm1hdGlvbiA9IGZhbHNlKX0KICAgIG9uOnNlY29uZGFyeT17KCkgPT4gKGNsb3NlQ29uZmlybWF0aW9uID0gZmFsc2UpfQogICAgb246YWN0aXZlPXsoKSA9PiB7CiAgICAgIGNsb3NlQ29uZmlybWF0aW9uID0gZmFsc2U7CiAgICAgIHNob3dDcmVhdGVGb3JtID0gZmFsc2U7CiAgICAgIHNob3dFZGl0Rm9ybSA9IGZhbHNlOwogICAgICBzaG93Vmlld0Zyb20gPSBmYWxzZTsKICAgICAgdW5zYXZlZENoYW5nZXMgPSBmYWxzZTsKICAgIH19CiAgLz4Key9pZn0gLS0+CjwhLS0gCnsjaWYgc2hvd0VkaXRGb3JtIHx8IHNob3dWaWV3RnJvbX0KICA8ZGl2CiAgICBjbGFzcz0iZml4ZWQgdy1mdWxsIGgtc2NyZWVuIHotMTAgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgaW5zZXQtMCBiZy1ncmF5LTUwMCBiZy1vcGFjaXR5LTc1IHRyYW5zaXRpb24tb3BhY2l0eSIKICA+CiAgICA8VXBkYXRlRXZlbnQKICAgICAge3NjaGVtYX0KICAgICAgaWQ9e3JhcHBvcnRUb1VwZGF0ZUlkfQogICAgICBvbjpkZWxldGVkPXsoKSA9PiB7CiAgICAgICAgc2hvd0VkaXRGb3JtID0gZmFsc2U7CiAgICAgIH19CiAgICAgIGNsb3NlUG9wdXA9eygpID0+IHsKICAgICAgICBpZiAodW5zYXZlZENoYW5nZXMpIHsKICAgICAgICAgIGNsb3NlQ29uZmlybWF0aW9uID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2hvd0VkaXRGb3JtID0gZmFsc2U7CiAgICAgICAgICBzaG93Vmlld0Zyb20gPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH19CiAgICAgIGlzVmlld09ubHk9e3Nob3dWaWV3RnJvbX0KICAgIC8+CiAgPC9kaXY+CnsvaWZ9IC0tPgoKPGRpdiBjbGFzcz0iZ3JpZCBncmlkLWNvbHMtMiBwLTQgYmctcHJpbWFyeS01MCI+CiAgPGRpdj4KICAgIDwhLS0gb24gbW9iaWxlIHZpZXcgaWYgdXNlciBpcyBub3QgYWRtaW4gYW5kIHRyYWluZXIgYW5kIHRyYWluZXJOYW1lIGFyZSBzZXQgaGlkZSB0aGUgdmlkZSAtLT4KICAgIHsjaWYgaXNBZG1pbn0KICAgICAgPFRyYWluZXJEcm9wRG93bgogICAgICAgIGJpbmQ6c2VsZWN0ZWRWYWx1ZT17c2VsZWN0ZWRUcmFpbmVyfQogICAgICAgIG9uOnVwZGF0ZVRyYWluZXI9e3VwZGF0ZVJhcHBvcnRzfQogICAgICAvPgogICAgey9pZn0KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJtYXgtdy03eGwgbXgtYXV0byByZWxhdGl2ZSI+CiAgPGRpdiBjbGFzcz0iZ3JpZCBtZDpncmlkLWNvbHMtMiByZWxhdGl2ZSI+CiAgICB7I2lmICFzaG93Q2FsfQogICAgICA8ZGl2CiAgICAgICAgY2xhc3M9Im1kOmhpZGRlbiBweC00IG14LWF1dG8gbXQtNCB3LWZ1bGwgZmxleC1jb2wgZmxleCBmbGV4LXdyYXAgc3BhY2UteS00IgogICAgICA+CiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgY2xhc3M9ImZjLXRvZGF5LWJ1dHRvbiB0ZXh0LXdoaXRlIHB4LTQgc2VsZi1jZW50ZXIgcHktMiByb3VuZGVkIgogICAgICAgICAgb246Y2xpY2s9eygpID0+IHsKICAgICAgICAgICAgLy8gc2V0IHNlbGVjdGVkRGF0ZSB0byB0b2RheQogICAgICAgICAgICBzZWxlY3RlZERhdGUgPSBkYXlqcygpLmZvcm1hdCgiWVlZWS1NTS1ERCIpOwogICAgICAgICAgfX0+VG9kYXk8L2J1dHRvbgogICAgICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iZmxleC0xIGZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBzcGFjZS14LTIiCiAgICAgICAgPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gewogICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSA9IGRheWpzKHNlbGVjdGVkRGF0ZSkKICAgICAgICAgICAgICAgIC5zdWJ0cmFjdCgyLCAiZGF5IikKICAgICAgICAgICAgICAgIC5mb3JtYXQoIllZWVktTU0tREQiKTsKICAgICAgICAgICAgfX0KICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQtZnVsbCBiZy1wcmltYXJ5LTUwIHAtMyB0ZXh0LXByaW1hcnktNTAwIgogICAgICAgICAgICB0aXRsZT0iLTIgZGF5cyAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICB3aWR0aD0iMjAiCiAgICAgICAgICAgICAgaGVpZ2h0PSIyMCIKICAgICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgICAgICAgY2xhc3M9ImJpIGJpLWNoZXZyb24tZG91YmxlLWxlZnQiCiAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE2IDE2IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgIGQ9Ik04LjM1NCAxLjY0NmEuNS41IDAgMCAxIDAgLjcwOEwyLjcwNyA4bDUuNjQ3IDUuNjQ2YS41LjUgMCAwIDEtLjcwOC43MDhsLTYtNmEuNS41IDAgMCAxIDAtLjcwOGw2LTZhLjUuNSAwIDAgMSAuNzA4IDB6IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgIGQ9Ik0xMi4zNTQgMS42NDZhLjUuNSAwIDAgMSAwIC43MDhMNi43MDcgOGw1LjY0NyA1LjY0NmEuNS41IDAgMCAxLS43MDguNzA4bC02LTZhLjUuNSAwIDAgMSAwLS43MDhsNi02YS41LjUgMCAwIDEgLjcwOCAweiIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gewogICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSA9IGRheWpzKHNlbGVjdGVkRGF0ZSkKICAgICAgICAgICAgICAgIC5zdWJ0cmFjdCgxLCAiZGF5IikKICAgICAgICAgICAgICAgIC5mb3JtYXQoIllZWVktTU0tREQiKTsKICAgICAgICAgICAgfX0KICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQtZnVsbCBiZy1wcmltYXJ5LTUwIHAtMyB0ZXh0LXByaW1hcnktNTAwIgogICAgICAgICAgICB0aXRsZT0icHJldmlvdXMgZGF5IgogICAgICAgICAgPgogICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgd2lkdGg9IjIwIgogICAgICAgICAgICAgIGhlaWdodD0iMjAiCiAgICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICAgIGNsYXNzPSJiaSBiaS1jaGV2cm9uLWxlZnQiCiAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE2IDE2IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgIGQ9Ik0xMS4zNTQgMS42NDZhLjUuNSAwIDAgMSAwIC43MDhMNS43MDcgOGw1LjY0NyA1LjY0NmEuNS41IDAgMCAxLS43MDguNzA4bC02LTZhLjUuNSAwIDAgMSAwLS43MDhsNi02YS41LjUgMCAwIDEgLjcwOCAweiIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gewogICAgICAgICAgICAgIHNob3dDYWwgPSAhc2hvd0NhbDsKICAgICAgICAgICAgfX0KICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQgcC00IGJvcmRlci0yIgogICAgICAgICAgPgogICAgICAgICAgICB7ZGF5anMoc2VsZWN0ZWREYXRlKS5mb3JtYXQoIkRELk1NLllZWVkiKX0KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gewogICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSA9IGRheWpzKHNlbGVjdGVkRGF0ZSkKICAgICAgICAgICAgICAgIC5hZGQoMSwgImRheSIpCiAgICAgICAgICAgICAgICAuZm9ybWF0KCJZWVlZLU1NLUREIik7CiAgICAgICAgICAgIH19CiAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkLWZ1bGwgYmctcHJpbWFyeS01MCBwLTMgdGV4dC1wcmltYXJ5LTUwMCIKICAgICAgICAgICAgdGl0bGU9Im5leHQgZGF5IgogICAgICAgICAgPgogICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgd2lkdGg9IjIwIgogICAgICAgICAgICAgIGhlaWdodD0iMjAiCiAgICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICAgIGNsYXNzPSJiaSBiaS1jaGV2cm9uLXJpZ2h0IgogICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNiAxNiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9ImV2ZW5vZGQiCiAgICAgICAgICAgICAgICBkPSJNNC42NDYgMS42NDZhLjUuNSAwIDAgMSAuNzA4IDBsNiA2YS41LjUgMCAwIDEgMCAuNzA4bC02IDZhLjUuNSAwIDAgMS0uNzA4LS43MDhMMTAuMjkzIDggNC42NDYgMi4zNTRhLjUuNSAwIDAgMSAwLS43MDh6IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiB7CiAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlID0gZGF5anMoc2VsZWN0ZWREYXRlKQogICAgICAgICAgICAgICAgLmFkZCgyLCAiZGF5IikKICAgICAgICAgICAgICAgIC5mb3JtYXQoIllZWVktTU0tREQiKTsKICAgICAgICAgICAgfX0KICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQtZnVsbCBiZy1wcmltYXJ5LTUwIHAtMyB0ZXh0LXByaW1hcnktNTAwIgogICAgICAgICAgICB0aXRsZT0iKzIgZGF5cyIKICAgICAgICAgID4KICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgIHdpZHRoPSIyMCIKICAgICAgICAgICAgICBoZWlnaHQ9IjIwIgogICAgICAgICAgICAgIGZpbGw9ImJnLXByaW1hcnktNTAwIgogICAgICAgICAgICAgIGNsYXNzPSJmaWxsLWN1cnJlbnQiCiAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE2IDE2IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgIGQ9Ik0zLjY0NiAxLjY0NmEuNS41IDAgMCAxIC43MDggMGw2IDZhLjUuNSAwIDAgMSAwIC43MDhsLTYgNmEuNS41IDAgMCAxLS43MDgtLjcwOEw5LjI5MyA4IDMuNjQ2IDIuMzU0YS41LjUgMCAwIDEgMC0uNzA4eiIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9ImV2ZW5vZGQiCiAgICAgICAgICAgICAgICBkPSJNNy42NDYgMS42NDZhLjUuNSAwIDAgMSAuNzA4IDBsNiA2YS41LjUgMCAwIDEgMCAuNzA4bC02IDZhLjUuNSAwIDAgMS0uNzA4LS43MDhMMTMuMjkzIDggNy42NDYgMi4zNTRhLjUuNSAwIDAgMSAwLS43MDh6IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgey9pZn0KCiAgICA8ZGl2IGNsYXNzPSIge3Nob3dDYWwgPyAnYmxvY2snIDogJ2hpZGRlbid9IG1kOmJsb2NrIGgtW2NhbGMoMTAwdmgtNzRweCldIj4KICAgICAgPGRpdgogICAgICAgIGNsYXNzPSJhYnNvbHV0ZSB0b3AtMCByaWdodC0wIGxlZnQtMCBib3R0b20tMCBzbTp2aXNpYmxlIHNtOm10LTAgbWQ6cmVsYXRpdmUiCiAgICAgID4KICAgICAgICA8RnVsbENhbGVuZGFyCiAgICAgICAgICB7b3B0aW9uc30KICAgICAgICAgIGNsYXNzPSJwLTQgbWF4LXctc2NyZWVuLWxnIG1kOm14LWF1dG8gbWluLWgtZnVsbCIKICAgICAgICAvPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYKICAgICAgY2xhc3M9IntzZWxlY3RlZERhdGUgJiYgIXNob3dDYWwKICAgICAgICA/ICdibG9jaycKICAgICAgICA6ICdoaWRkZW4nfSBtZDpibG9jayBtZDpoLVtjYWxjKDEwMHZoLTIwMHB4KV0gaC1bY2FsYygxMDB2aC0xNTBweCldIgogICAgPgogICAgICA8U2luZ2xlRGF5CiAgICAgICAgYmluZDpyYXBvcnRzPXtzZWxlY3RlZFJhcHBvcnRzfQogICAgICAgIGJpbmQ6c2VsZWN0ZWREYXRlCiAgICAgICAgYmluZDpzZWxlY3RlZFRyYWluZXIKICAgICAgICBvbjpldmVudENsaWNrZWQ9e2FzeW5jIChpbmZvKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhpbmZvKTsKICAgICAgICAgIC8vICAgY29uc3QgY3VycmVudERhdGUgPQogICAgICAgICAgLy8gICAgIGluZm8uZGV0YWlsLmV2ZW50Ll9kZWYuZXh0ZW5kZWRQcm9wcy5yYXBwb3J0LmRhdHVtOwogICAgICAgICAgLy8gICBjb25zdCB0cmFpbmluZ0RhdGUgPSBuZXcgRGF0ZShjdXJyZW50RGF0ZSk7CiAgICAgICAgICAvLyAgIGNvbnN0IGlzRWRpdGFibGUgPSBhd2FpdCBjaGVja0lmVHJhaW5pbmdFZGl0YWJsZSgKICAgICAgICAgIC8vICAgICB0cmFpbmluZ0RhdGUsCiAgICAgICAgICAvLyAgICAgaXNBZG1pbiwKICAgICAgICAgIC8vICAgICAhIWluZm8uZGV0YWlsLmV2ZW50Ll9kZWYuZXh0ZW5kZWRQcm9wcy5yYXBwb3J0LmFyY2hpdmVkLAogICAgICAgICAgLy8gICAgICEhaW5mby5kZXRhaWwuZXZlbnQuX2RlZi5leHRlbmRlZFByb3BzLnJhcHBvcnQuaW52b2ljZWRJbgogICAgICAgICAgLy8gICApOwogICAgICAgICAgLy8gICBpZiAoaXNFZGl0YWJsZSkgewogICAgICAgICAgLy8gICAgIHNob3dFZGl0Rm9ybSA9IHRydWU7CiAgICAgICAgICAvLyAgIH0gZWxzZSB7CiAgICAgICAgICAvLyAgICAgc2hvd1ZpZXdGcm9tID0gdHJ1ZTsKICAgICAgICAgIC8vICAgfQogICAgICAgICAgLy8gICAvLyBAdHMtaWdub3JlCiAgICAgICAgICAvLyAgIHJhcHBvcnRUb1VwZGF0ZUlkID0gaW5mby5kZXRhaWwuZXZlbnQuX2RlZi5leHRlbmRlZFByb3BzLnJhcHBvcnQuaWQ7CiAgICAgICAgfX0KICAgICAgICBvbjpkYXRlU2VsZWN0ZWQ9eyhpbmZvKSA9PiB7CiAgICAgICAgICBsZXQgdGltZURpZmYgPSBkYXlqcyhpbmZvLmRldGFpbC5lbmQpLmRpZmYoCiAgICAgICAgICAgIGRheWpzKGluZm8uZGV0YWlsLnN0YXJ0KSwKICAgICAgICAgICAgIm1pbnV0ZSIKICAgICAgICAgICk7CgogICAgICAgICAgLy8gc2VsZWN0ZWREdXJhdGlvbiBzaG91bGQgb25seSBiZSAzMCwgNjAsIDkwLCAxMjAgb25seSBhcHByb3hpbWF0ZSBpdAogICAgICAgICAgaWYgKHRpbWVEaWZmIDwgNzUpIHsKICAgICAgICAgICAgdGltZURpZmYgPSA2MDsKICAgICAgICAgIH0gZWxzZSBpZiAodGltZURpZmYgPCAxMDUpIHsKICAgICAgICAgICAgdGltZURpZmYgPSA5MDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRpbWVEaWZmID0gMTIwOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIGZvcm1hdCB0aW1lRGlmZiB0byBmb3JtYXQgJ2hoOm1tOnNzJwogICAgICAgICAgc2VsZWN0ZWREdXJhdGlvbiA9IGRheWpzKCkKICAgICAgICAgICAgLmhvdXIoMCkKICAgICAgICAgICAgLm1pbnV0ZSh0aW1lRGlmZikKICAgICAgICAgICAgLnNlY29uZCgwKQogICAgICAgICAgICAuZm9ybWF0KCJISDptbTpzcyIpOwogICAgICAgICAgLy8gQHRzLWlnbm9yZQoKICAgICAgICAgIHNob3dDcmVhdGVGb3JtID0gdHJ1ZTsKICAgICAgICAgIC8vIHRvZG8gYXV0byBmaWxsIHRoZSBzdGFydCBkYXRlIGFuZCBkdXJhdGlvbiBieSBjYWxjdWxhdGluZyB0aGUgZHVyYXRpb24gd2l0aCBzdGFydCBhbmQgZW5kIGRhdGUKICAgICAgICB9fQogICAgICAvPgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKPFRvYXN0c0NvbXBvbmVudCAvPgoKPHN0eWxlPgogIC8qIGRldGFpbHMgPiBzdW1tYXJ5IHsKICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgfQogIGRldGFpbHMgPiBzdW1tYXJ5Ojotd2Via2l0LWRldGFpbHMtbWFya2VyIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgfQoKICBkZXRhaWxzW29wZW5dIHN1bW1hcnkgfiAqIHsKICAgIGFuaW1hdGlvbjogc3dlZXAgMC4yNXMgZWFzZS1pbi1vdXQ7CiAgfQoKICBAa2V5ZnJhbWVzIHN3ZWVwIHsKICAgIDAlIHsKICAgICAgb3BhY2l0eTogMDsKICAgICAgbWFyZ2luLXRvcDogLTEwcHg7CiAgICB9CiAgICAxMDAlIHsKICAgICAgb3BhY2l0eTogMTsKICAgICAgbWFyZ2luLXRvcDogMHB4OwogICAgfQogIH0gKi8KPC9zdHlsZT4K
replicaCount: 3
image:
  repository: grpl/jcscherrer-pr
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.0.pr-9999-f0e8f7c"
imagetest:
  repository: apptest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  ssl: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
