# Default values for myapp for nop stage.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

testdata:
  enabled: true

# env:
#   - name: SVELTE_APP_USERNAME
#     value: admin
#   - name: SVELTE_APP_PASSWORD
#     value: password

gras-deploy:
  grapi:
    autoscaling:
      minReplicas: 2
    externalsecrets: []
    extraSecrets: 
    - jcs-conn-credential
    datasources:
      - name: jcscherrer
        spec:
          mysql:
            database: jcscherrer
            host: $(host)
            name: jcscherrer
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    initContainers:
      - name: init-db
        spec:
          name: init-db
          image: grpl/jcscherrer-data:data
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" ; then
                echo "database already exists...";
              else
                mysql -h $(host) -P $(port) -u $(username) -p$(password) < ./db.sql;
              fi
      - name: wait-for-db
        spec:
          name: wait-for-db
          image: grpl/jcscherrer-data:data
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" ; then
                echo "database already exists..."
              else
                echo "wait for database"
                while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "USE jcscherrer; SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'jcscherrer' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;"; do
                  echo -n .;
                  sleep 2;
                done;
              fi
      - name: update-db-202501
        spec:
          name: update-db-202501
          image: mysql
          command:
            - bash
            - -c
            - |
              sleep 5;
              while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do
                echo -n .;
                sleep 2;
              done;
              echo "db available now..."
              if ! mysql -h ${host} -P ${port} -u ${username} -p${password} -e "use jcscherrer; SHOW COLUMNS FROM Rapport LIKE 'kundeIds'; " | grep -i kunde; then
                echo "run the upgrade..."
                mysql -h ${host} -P ${port} -u ${username} -p${password} -e '
                  use jcscherrer; 
                  ALTER TABLE `Rapport` ADD COLUMN `kundeIds` varchar(255) NULL AFTER `kundeId`; 
                  SET SQL_SAFE_UPDATES = 0; 
                  UPDATE Rapport AS a INNER JOIN Rapport AS b ON a.kundeId = b.kundeId SET a.kundeIds = concat("[",b.kundeId,"]"); 
                  SET SQL_SAFE_UPDATES = 1; 
                  ALTER TABLE `Rapport` DROP COLUMN `kundeId`;
                  ALTER TABLE `ArchivedRapport` ADD COLUMN `kundeIds` varchar(255) NULL AFTER `kundeId`; 
                  SET SQL_SAFE_UPDATES = 0; 
                  UPDATE ArchivedRapport AS a INNER JOIN ArchivedRapport AS b ON a.kundeId = b.kundeId SET a.kundeIds = concat("[",b.kundeId,"]"); 
                  SET SQL_SAFE_UPDATES = 1; 
                  ALTER TABLE `ArchivedRapport` DROP COLUMN `kundeId`;'
              else
                echo "update-db-202501 already patched"
              fi

  gruim:
    autoscaling:
      minReplicas: 2


replicaCount: 2
