# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: grpl/civo-build-container:v0.16

definitions: 
  steps:
    - step: &cluster 
        name: 'Prep Cluster'
        script:
          - pipe: atlassian/trigger-pipeline:5.8.1
            variables:
              REPOSITORY: grapple-cluster-deploy
              BITBUCKET_ACCESS_TOKEN: ${grapple_clusters_accesss_token}
              CUSTOM_PIPELINE_NAME: ${stage}
              REF_TYPE: branch
              REF_NAME: main
              WAIT: "true"
        #   - kubectl version --client=true && helm version && civo version || true
        #   - civo apikey save grapple ${civokey} && civo region current ${civoregion} 
        #   - civo apikey ls
        #   - if ! civo k8s show ${name}-${stage} >/dev/null 2>&1; then civo k8s create ${name}-${stage} --size=${civosize} --nodes=${civonodes} ${civoapps} || true; fi
        #   - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
        #   - civo k8s config ${name}-${stage} --save --switch
        #   - if [ "$(kubectl get configuration grpl | grep grpl | awk '{print $2}')" != "True" ] || [ "$(kubectl get configuration grpl | grep grpl | awk '{print $2}')" != "True" ]; then grpl cluster install --TARGET_PLATFORM=CIVO --CIVO_REGION=${civoregion} --CIVO_CLUSTER=${name}-${stage} --CIVO_EMAIL_ADDRESS=info@grapple-solutions.com --GRAPPLE_DNS=${stage}.${domain} --AUTO_CONFIRM=true; else echo "grpl is already running"; fi
        #   - docker run -i --env GRAPPLE_DNS=${stage}.${domain} --env CIVO_MASTER_IP=$(civo k8s show ${name}-${stage} -o custom -f "MasterIP") --env HOSTED_ZONE_ID=${HOSTED_ZONE_ID} grpl/dns-aws-route53-upsert:latest
        # services:
        #   - docker
    - step: &clusteruat 
        name: 'Prep Cluster'
        script:
          - pipe: atlassian/trigger-pipeline:5.8.1
            variables:
              REPOSITORY: grapple-cluster-deploy
              BITBUCKET_ACCESS_TOKEN: ${grapple_clusters_accesss_token}
              CUSTOM_PIPELINE_NAME: uat
              REF_TYPE: branch
              REF_NAME: main
              WAIT: "true"

    - step: &externalsecrets
        name: 'Prep external secrets in Cluster'
        script:
          - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
          - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
          - civo k8s config ${name}-${stage} --save --switch
          - echo "wait for grapple installation"
          - while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done
          - sleep 5
          - kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s
          - # prepare external secrets
          - echo -n "${AWS_ACCESS_KEY_ID}" > ./access-key
          - echo -n "${AWS_SECRET_ACCESS_KEY}" > ./secret-access-key
          - kubectl -n grpl-system create secret generic awssm-secret-jcs --from-file=./access-key  --from-file=./secret-access-key 2>/dev/null || true

pipelines:
  
#  default:
#    - parallel:
#      - step: *build
#      # - step: *lint
#      # - step: *scan

  custom:
    demo:
      - variables:
        - name: stage
          default: demo
      - step:
          name: 'Deployment to demo'
          script:
            - echo "demo"

  pull-requests:
    '**': #this runs as default for any branch not elsewhere defined
      - parallel:
        - step: *cluster
        # step externalsecrets disabled for PRs on NOP
        # - step: *externalsecrets
        - step:
            name: 'Deployment of PR to nop'
            # caches:
            #   - docker
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - docker login -u $dockeruser -p $dockerpw 
              - echo "wait for grapple installation"
              - while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done
              - sleep 5
              - kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s
              - CRD=Cluster && echo "wait for ${CRD} to be deployed:" && until kubectl explain ${CRD} >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "${CRD} deployed"
              - echo "build-package-push-deploy..." && task build-package-push-deploy STAGE=pr
              - echo "update-bitbucket-pr..." && task update-bitbucket-pr STAGE=pr
              - git pull && echo $BITBUCKET_PR_ID > pr_id.txt && git add --force pr_id.txt && git commit -m "[skip ci] updated PR ID" && git push
            services:
              - docker

  branches:
    develop:
      - parallel:
        - step: *clusteruat
        - step:
            name: 'Cleanup PR deployments'
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - export re='^[0-9]+$'
              - if [ -f "pr_id.txt" ] && [[ $(cat pr_id.txt) =~ $re ]] && [ "${PROJECT_NAME_SHORT}" != "" ]; then kubectl delete ns ${PROJECT_NAME_SHORT}-pr-$(cat pr_id.txt) || true; fi
        # step externalsecrets disabled for deployments on UAT
        # - step: *externalsecrets
        - step:
            name: 'Deployment to UAT'
            deployment: staging
            # caches:
            #   - docker
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - docker login -u $dockeruser -p $dockerpw 
              - echo "wait for grapple installation"
              - while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done
              - sleep 5
              - kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s
              - kubectl wait deploy kubeblocks -n kb-system --for=condition=available 
              - CRD=Cluster && echo "wait for ${CRD} to be deployed:" && until kubectl explain ${CRD} >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "${CRD} deployed"
              - task build-package-push-deploy STAGE=uat
            services:
              - docker

    main:
      - step:
          name: 'Deployment to prd'
          script:
            - echo "PROD"
