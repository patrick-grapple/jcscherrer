# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: grpl/civo-build-container:v0.14

definitions: 
  steps:
    - step: &cluster 
        name: 'Prep Cluster'
        caches:
          - docker
        script:
          - kubectl version --client=true && helm version && civo version || true
          - civo apikey save grapple ${civokey} && civo region current ${civoregion} 
          - civo apikey ls
          - if ! civo k8s show ${name}-${stage} >/dev/null 2>&1; then civo k8s create ${name}-${stage} --size=${civosize} --nodes=${civonodes} ${civoapps} || true; fi
          - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
          - civo k8s config ${name}-${stage} --save --switch
          - if [ "$(kubectl get configuration grpl | grep grpl | awk '{print $2}')" != "True" ] || [ "$(kubectl get configuration grpl | grep grpl | awk '{print $2}')" != "True" ]; then grpl cluster install --TARGET_PLATFORM=CIVO --CIVO_REGION=${civoregion} --CIVO_CLUSTER=${name}-${stage} --CIVO_EMAIL_ADDRESS=info@grapple-solutions.com --GRAPPLE_DNS=${stage}.${domain} --AUTO_CONFIRM=true; else echo "grpl is already running"; fi
          - docker run -it --env GRAPPLE_DNS=${stage}.${domain} --env CIVO_MASTER_IP=$(civo k8s show ${name}-${stage} -o custom -f "MasterIP") grpl/dns-aws-route53-upsert:latest
        services:
          - docker

pipelines:
  
#  default:
#    - parallel:
#      - step: *build
#      # - step: *lint
#      # - step: *scan

  custom:
    demo:
      - variables:
        - name: stage
          default: demo
      - step:
          name: 'Deployment to demo'
          script:
            - echo "demo"

  pull-requests:
    '**': #this runs as default for any branch not elsewhere defined
      - parallel:
        - step: *cluster
        - step:
            name: 'Deployment of PR to nop'
            caches:
              - docker
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - docker login -u $dockeruser -p $dockerpw 
              - task build-package-push-deploy STAGE=pr
              - echo $BITBUCKET_PR_ID > pr_id.txt
              - git add --force pr_id.txt && git commit -m "[skip ci] updated PR ID" && git push
            services:
              - docker

  branches:
    develop:
      - parallel:
        - step: *cluster
        - step:
            name: 'Cleanup PR deployments'
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - export re='^[0-9]+$'
              - if [ -f "pr_id.txt" ] && [[ $(cat pr_id.txt) =~ $re ]] && [ "${PROJECT_NAME_SHORT}" != "" ]; then kubectl delete ns ${PROJECT_NAME_SHORT}-pr-$(cat pr_id.txt); fi
        - step:
            name: 'Deployment to UAT'
            caches:
              - docker
            script:
              - civo apikey save cloud20x ${civokey} && civo region current ${civoregion} 
              - until [ $(civo k8s show -o custom -f Status ${name}-${stage}) = "ACTIVE" ]; do echo -n "."; sleep 3; done
              - civo k8s config ${name}-${stage} --save --switch
              - docker login -u $dockeruser -p $dockerpw 
              - task build-package-push-deploy STAGE=uat
            services:
              - docker

    main:
      - step:
          name: 'Deployment to prd'
          script:
            - echo "PROD"
